
rosserial_stm32cxj_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800646c  0800646c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006474  08006474  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000074  080064f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  080064f4  0002097c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c79  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edc  00000000  00000000  00037d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0003abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0003b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290e6  00000000  00000000  0003c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d330  00000000  00000000  0006526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8198  00000000  00000000  0007259e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003198  00000000  00000000  0016a78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	08006184 	.word	0x08006184

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	08006184 	.word	0x08006184

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8000540:	b480      	push	{r7}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	ed87 0a00 	vstr	s0, [r7]
 800054c:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 800054e:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	15db      	asrs	r3, r3, #23
 8000554:	b21b      	sxth	r3, r3
 8000556:	b2db      	uxtb	r3, r3
 8000558:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000560:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8000562:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000566:	2bff      	cmp	r3, #255	; 0xff
 8000568:	d103      	bne.n	8000572 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 800056a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800056e:	82fb      	strh	r3, [r7, #22]
 8000570:	e02a      	b.n	80005c8 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8000572:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d005      	beq.n	8000586 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 800057a:	8afb      	ldrh	r3, [r7, #22]
 800057c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000580:	b29b      	uxth	r3, r3
 8000582:	82fb      	strh	r3, [r7, #22]
 8000584:	e020      	b.n	80005c8 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 800058c:	2300      	movs	r3, #0
 800058e:	82fb      	strh	r3, [r7, #22]
 8000590:	e01a      	b.n	80005c8 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8000592:	8afb      	ldrh	r3, [r7, #22]
 8000594:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000598:	b29b      	uxth	r3, r3
 800059a:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d109      	bne.n	80005c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x80>
      {
          mantissa <<= 1;
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
          exp--;
 80005b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	3b01      	subs	r3, #1
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 80005be:	e7f0      	b.n	80005a2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x62>
      }
      mantissa &= 0x7FFFFF;
 80005c0:	693b      	ldr	r3, [r7, #16]
 80005c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80005c6:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	1c59      	adds	r1, r3, #1
 80005ee:	6079      	str	r1, [r7, #4]
 80005f0:	0152      	lsls	r2, r2, #5
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	08d9      	lsrs	r1, r3, #3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	b2ca      	uxtb	r2, r1
 8000602:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	0ad9      	lsrs	r1, r3, #11
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	607a      	str	r2, [r7, #4]
 800060e:	b2ca      	uxtb	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8000612:	8afb      	ldrh	r3, [r7, #22]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	b2d9      	uxtb	r1, r3
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	0cdb      	lsrs	r3, r3, #19
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 030f 	and.w	r3, r3, #15
 8000624:	b2da      	uxtb	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	1c58      	adds	r0, r3, #1
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	430a      	orrs	r2, r1
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8000632:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000636:	111b      	asrs	r3, r3, #4
 8000638:	b2da      	uxtb	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	1c59      	adds	r1, r3, #1
 800063e:	6079      	str	r1, [r7, #4]
 8000640:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8000648:	edd7 7a00 	vldr	s15, [r7]
 800064c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000654:	d508      	bpl.n	8000668 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x128>
    {
      *(outbuffer - 1) |= 0x80;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3b01      	subs	r3, #1
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3b01      	subs	r3, #1
 8000660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8000668:	2308      	movs	r3, #8
  }
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8000676:	b480      	push	{r7}
 8000678:	b087      	sub	sp, #28
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3303      	adds	r3, #3
 8000684:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	091b      	lsrs	r3, r3, #4
 8000690:	f003 030f 	and.w	r3, r3, #15
 8000694:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	031b      	lsls	r3, r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	051b      	lsls	r3, r3, #20
 80006bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	8afb      	ldrh	r3, [r7, #22]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 80006f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d102      	bne.n	8000702 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x8c>
    {
      exp = 255; // NaN, infinity etc.
 80006fc:	23ff      	movs	r3, #255	; 0xff
 80006fe:	82fb      	strh	r3, [r7, #22]
 8000700:	e02c      	b.n	800075c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe6>
    }
    else if (exp - 1023 > 127)
 8000702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000706:	f240 427e 	movw	r2, #1150	; 0x47e
 800070a:	4293      	cmp	r3, r2
 800070c:	dd04      	ble.n	8000718 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa2>
    {
      exp = 255;
 800070e:	23ff      	movs	r3, #255	; 0xff
 8000710:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	e021      	b.n	800075c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe6>
    }
    else if (exp - 1023 >= -126)
 8000718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800071c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000720:	dd05      	ble.n	800072e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xb8>
    {
      exp -= 1023 - 127; // Normal case
 8000722:	8afb      	ldrh	r3, [r7, #22]
 8000724:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000728:	b29b      	uxth	r3, r3
 800072a:	82fb      	strh	r3, [r7, #22]
 800072c:	e016      	b.n	800075c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe6>
    }
    else if (exp - 1023 < -150)
 800072e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000732:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8000736:	dc02      	bgt.n	800073e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xc8>
    {
      exp = 0; // Too small or zero
 8000738:	2300      	movs	r3, #0
 800073a:	82fb      	strh	r3, [r7, #22]
 800073c:	e00e      	b.n	800075c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe6>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000744:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 8000746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800074a:	f240 3381 	movw	r3, #897	; 0x381
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	fa22 f303 	lsr.w	r3, r2, r3
 8000756:	613b      	str	r3, [r7, #16]
      exp = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000762:	4293      	cmp	r3, r2
 8000764:	d002      	beq.n	800076c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xf6>
      mantissa += 1;
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	3301      	adds	r3, #1
 800076a:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	085b      	lsrs	r3, r3, #1
 8000770:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8000776:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800077a:	05da      	lsls	r2, r3, #23
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4313      	orrs	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	061b      	lsls	r3, r3, #24
 800078c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4313      	orrs	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fa      	ldr	r2, [r7, #12]

    memcpy(f, &val, sizeof(val));
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	601a      	str	r2, [r3, #0]
    return 8;
 800079c:	2308      	movs	r3, #8
  }
 800079e:	4618      	mov	r0, r3
 80007a0:	371c      	adds	r7, #28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <_ZN3ros3MsgC1Ev>:
class Msg
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <_ZN3ros3MsgC1Ev+0x1c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	0800643c 	.word	0x0800643c

080007cc <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float64():
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
      data(0)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffe8 	bl	80007ac <_ZN3ros3MsgC1Ev>
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <_ZN8std_msgs7Float64C1Ev+0x28>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    {
    }
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08006424 	.word	0x08006424

080007f8 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->data);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	441a      	add	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000812:	eeb0 0a67 	vmov.f32	s0, s15
 8000816:	4610      	mov	r0, r2
 8000818:	f7ff fe92 	bl	8000540 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800081c:	4602      	mov	r2, r0
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4413      	add	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]
      return offset;
 8000824:	68fb      	ldr	r3, [r7, #12]
    }
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->data));
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	441a      	add	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3304      	adds	r3, #4
 8000846:	4619      	mov	r1, r3
 8000848:	4610      	mov	r0, r2
 800084a:	f7ff ff14 	bl	8000676 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800084e:	4602      	mov	r2, r0
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4413      	add	r3, r2
 8000854:	60fb      	str	r3, [r7, #12]
     return offset;
 8000856:	68fb      	ldr	r3, [r7, #12]
    }
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <_ZN8std_msgs7Float647getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float64"; };
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	0800619c 	.word	0x0800619c

0800087c <_ZN8std_msgs7Float646getMD5Ev>:
    virtual const char * getMD5() override { return "fdb28210bfa9d7c91146260178d9a584"; };
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	080061b0 	.word	0x080061b0

08000898 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
      data("")
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff82 	bl	80007ac <_ZN3ros3MsgC1Ev>
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80008b2:	605a      	str	r2, [r3, #4]
    {
    }
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	0800640c 	.word	0x0800640c
 80008c4:	080061d4 	.word	0x080061d4

080008c8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fcac 	bl	8000238 <strlen>
 80008e0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 f955 	bl	8001b9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3304      	adds	r3, #4
 80008f4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	18d0      	adds	r0, r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	4619      	mov	r1, r3
 8000904:	f005 fae6 	bl	8005ed4 <memcpy>
      offset += length_data;
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4413      	add	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
      return offset;
 8000910:	68fb      	ldr	r3, [r7, #12]
    }
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	441a      	add	r2, r3
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f94e 	bl	8001bd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	3304      	adds	r3, #4
 800093e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4413      	add	r3, r2
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	d20c      	bcs.n	800096a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	441a      	add	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3b01      	subs	r3, #1
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	440b      	add	r3, r1
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e7ec      	b.n	8000944 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	3b01      	subs	r3, #1
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	3b01      	subs	r3, #1
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	441a      	add	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
     return offset;
 800098e:	693b      	ldr	r3, [r7, #16]
    }
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	080061d8 	.word	0x080061d8

080009b4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	080061e8 	.word	0x080061e8

080009d0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
      data()
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fed4 	bl	80007ac <_ZN3ros3MsgC1Ev>
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffde 	bl	80009d0 <_ZN3ros4TimeC1Ev>
    {
    }
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	080063f4 	.word	0x080063f4

08000a24 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6859      	ldr	r1, [r3, #4]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b2ca      	uxtb	r2, r1
 8000a3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	0a19      	lsrs	r1, r3, #8
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	0c19      	lsrs	r1, r3, #16
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b2ca      	uxtb	r2, r1
 8000a62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	0e19      	lsrs	r1, r3, #24
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3303      	adds	r3, #3
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6899      	ldr	r1, [r3, #8]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	0a19      	lsrs	r1, r3, #8
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	b2ca      	uxtb	r2, r1
 8000a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	0c19      	lsrs	r1, r3, #16
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	0e19      	lsrs	r1, r3, #24
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2ca      	uxtb	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	6839      	ldr	r1, [r7, #0]
 8000afa:	440b      	add	r3, r1
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	6839      	ldr	r1, [r7, #0]
 8000b10:	440b      	add	r3, r1
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3303      	adds	r3, #3
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	440b      	add	r3, r1
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	061b      	lsls	r3, r3, #24
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3304      	adds	r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	6839      	ldr	r1, [r7, #0]
 8000b50:	440b      	add	r3, r1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3302      	adds	r3, #2
 8000b64:	6839      	ldr	r1, [r7, #0]
 8000b66:	440b      	add	r3, r1
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	041b      	lsls	r3, r3, #16
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3303      	adds	r3, #3
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	061b      	lsls	r3, r3, #24
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	60fb      	str	r3, [r7, #12]
     return offset;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    }
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	0800620c 	.word	0x0800620c

08000bb8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	0800621c 	.word	0x0800621c

08000bd4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fde4 	bl	80007ac <_ZN3ros3MsgC1Ev>
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	809a      	strh	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
    {
    }
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	080063dc 	.word	0x080063dc
 8000c18:	080061d4 	.word	0x080061d4

08000c1c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	8899      	ldrh	r1, [r3, #4]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	b2ca      	uxtb	r2, r1
 8000c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	889b      	ldrh	r3, [r3, #4]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	3301      	adds	r3, #1
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2ca      	uxtb	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff faee 	bl	8000238 <strlen>
 8000c5c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	69b9      	ldr	r1, [r7, #24]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 ff97 	bl	8001b9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	18d0      	adds	r0, r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f005 f928 	bl	8005ed4 <memcpy>
      offset += length_topic_name;
 8000c84:	69fa      	ldr	r2, [r7, #28]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4413      	add	r3, r2
 8000c8a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fad1 	bl	8000238 <strlen>
 8000c96:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	6979      	ldr	r1, [r7, #20]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 ff7a 	bl	8001b9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	18d0      	adds	r0, r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f005 f90b 	bl	8005ed4 <memcpy>
      offset += length_message_type;
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fab4 	bl	8000238 <strlen>
 8000cd0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	6939      	ldr	r1, [r7, #16]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff5d 	bl	8001b9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	18d0      	adds	r0, r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f005 f8ee 	bl	8005ed4 <memcpy>
      offset += length_md5sum;
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000d06:	68f9      	ldr	r1, [r7, #12]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	0a19      	lsrs	r1, r3, #8
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	0c19      	lsrs	r1, r3, #16
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3302      	adds	r3, #2
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	0e19      	lsrs	r1, r3, #24
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3303      	adds	r3, #3
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	61fb      	str	r3, [r7, #28]
      return offset;
 8000d48:	69fb      	ldr	r3, [r7, #28]
    }
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b08a      	sub	sp, #40	; 0x28
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	889b      	ldrh	r3, [r3, #4]
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	3301      	adds	r3, #1
 8000d78:	6839      	ldr	r1, [r7, #0]
 8000d7a:	440b      	add	r3, r1
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	4313      	orrs	r3, r2
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3302      	adds	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	441a      	add	r2, r3
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 ff19 	bl	8001bd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	3304      	adds	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	4413      	add	r3, r2
 8000db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d20c      	bcs.n	8000dd4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	441a      	add	r2, r3
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6839      	ldr	r1, [r7, #0]
 8000dc6:	440b      	add	r3, r1
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	3301      	adds	r3, #1
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd2:	e7ec      	b.n	8000dae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	4413      	add	r3, r2
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	441a      	add	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4413      	add	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	441a      	add	r2, r3
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fee6 	bl	8001bd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4413      	add	r3, r2
 8000e1a:	6a3a      	ldr	r2, [r7, #32]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d20c      	bcs.n	8000e3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	441a      	add	r2, r3
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	7812      	ldrb	r2, [r2, #0]
 8000e30:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	3301      	adds	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
 8000e38:	e7ec      	b.n	8000e14 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b01      	subs	r3, #1
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	441a      	add	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	441a      	add	r2, r3
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 feb3 	bl	8001bd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	3304      	adds	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d20c      	bcs.n	8000ea0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	441a      	add	r2, r3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	440b      	add	r3, r1
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e7ec      	b.n	8000e7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	441a      	add	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	440a      	add	r2, r1
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	3301      	adds	r3, #1
 8000edc:	6839      	ldr	r1, [r7, #0]
 8000ede:	440b      	add	r3, r1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	3302      	adds	r3, #2
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	3303      	adds	r3, #3
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	061b      	lsls	r3, r3, #24
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	3304      	adds	r3, #4
 8000f16:	61bb      	str	r3, [r7, #24]
     return offset;
 8000f18:	69bb      	ldr	r3, [r7, #24]
    }
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	08006240 	.word	0x08006240

08000f40 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	0800625c 	.word	0x0800625c

08000f5c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fc20 	bl	80007ac <_ZN3ros3MsgC1Ev>
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	711a      	strb	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000f7c:	609a      	str	r2, [r3, #8]
    {
    }
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	080063c4 	.word	0x080063c4
 8000f8c:	080061d4 	.word	0x080061d4

08000f90 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	7912      	ldrb	r2, [r2, #4]
 8000fa8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff f93f 	bl	8000238 <strlen>
 8000fba:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fde8 	bl	8001b9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	18d0      	adds	r0, r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f004 ff79 	bl	8005ed4 <memcpy>
      offset += length_msg;
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
      return offset;
 8000fea:	68fb      	ldr	r3, [r7, #12]
    }
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	3301      	adds	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	441a      	add	r2, r3
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fdd8 	bl	8001bd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	3304      	adds	r3, #4
 800102a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	d20c      	bcs.n	8001056 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	441a      	add	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3b01      	subs	r3, #1
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	440b      	add	r3, r1
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e7ec      	b.n	8001030 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	3b01      	subs	r3, #1
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	3b01      	subs	r3, #1
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	441a      	add	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
     return offset;
 800107a:	693b      	ldr	r3, [r7, #16]
    }
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	08006280 	.word	0x08006280

080010a0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	08006294 	.word	0x08006294

080010bc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fb70 	bl	80007ac <_ZN3ros3MsgC1Ev>
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	080063ac 	.word	0x080063ac

08001118 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	b2ca      	uxtb	r2, r1
 8001132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	0a19      	lsrs	r1, r3, #8
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	3301      	adds	r3, #1
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	b2ca      	uxtb	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	0c19      	lsrs	r1, r3, #16
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	3302      	adds	r3, #2
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	b2ca      	uxtb	r2, r1
 8001156:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	0e19      	lsrs	r1, r3, #24
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3303      	adds	r3, #3
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	b2ca      	uxtb	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3304      	adds	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	6a3a      	ldr	r2, [r7, #32]
 800117a:	429a      	cmp	r2, r3
 800117c:	d22b      	bcs.n	80011d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800118c:	6939      	ldr	r1, [r7, #16]
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	b2ca      	uxtb	r2, r1
 8001196:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	0a19      	lsrs	r1, r3, #8
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	3301      	adds	r3, #1
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2ca      	uxtb	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	3302      	adds	r3, #2
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2ca      	uxtb	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	0e19      	lsrs	r1, r3, #24
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	3303      	adds	r3, #3
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3304      	adds	r3, #4
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	3301      	adds	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
 80011d4:	e7ce      	b.n	8001174 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6919      	ldr	r1, [r3, #16]
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	0a19      	lsrs	r1, r3, #8
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	3301      	adds	r3, #1
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	b2ca      	uxtb	r2, r1
 80011f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	0c19      	lsrs	r1, r3, #16
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	3302      	adds	r3, #2
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	4413      	add	r3, r2
 8001204:	b2ca      	uxtb	r2, r1
 8001206:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	0e19      	lsrs	r1, r3, #24
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	3303      	adds	r3, #3
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4413      	add	r3, r2
 8001216:	b2ca      	uxtb	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	3304      	adds	r3, #4
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	429a      	cmp	r2, r3
 800122c:	d22b      	bcs.n	8001286 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800123c:	68f9      	ldr	r1, [r7, #12]
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	b2ca      	uxtb	r2, r1
 8001246:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	0a19      	lsrs	r1, r3, #8
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	3301      	adds	r3, #1
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	b2ca      	uxtb	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	0c19      	lsrs	r1, r3, #16
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	3302      	adds	r3, #2
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	0e19      	lsrs	r1, r3, #24
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	3303      	adds	r3, #3
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	b2ca      	uxtb	r2, r1
 8001276:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	3304      	adds	r3, #4
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	e7ce      	b.n	8001224 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69d9      	ldr	r1, [r3, #28]
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	b2ca      	uxtb	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	0a19      	lsrs	r1, r3, #8
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	3301      	adds	r3, #1
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	b2ca      	uxtb	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	0c19      	lsrs	r1, r3, #16
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	3302      	adds	r3, #2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	b2ca      	uxtb	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	0e19      	lsrs	r1, r3, #24
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	3303      	adds	r3, #3
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3304      	adds	r3, #4
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d228      	bcs.n	8001330 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ffa4 	bl	8000238 <strlen>
 80012f0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	6979      	ldr	r1, [r7, #20]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fc4d 	bl	8001b9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	3304      	adds	r3, #4
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	18d0      	adds	r0, r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4619      	mov	r1, r3
 800131c:	f004 fdda 	bl	8005ed4 <memcpy>
      offset += length_stringsi;
 8001320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	4413      	add	r3, r2
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	3301      	adds	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	e7d1      	b.n	80012d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001332:	4618      	mov	r0, r3
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800133a:	b580      	push	{r7, lr}
 800133c:	b08e      	sub	sp, #56	; 0x38
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001354:	3301      	adds	r3, #1
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	6a3a      	ldr	r2, [r7, #32]
 8001360:	4313      	orrs	r3, r2
 8001362:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001366:	3302      	adds	r3, #2
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	4313      	orrs	r3, r2
 8001374:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001378:	3303      	adds	r3, #3
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	6a3a      	ldr	r2, [r7, #32]
 8001384:	4313      	orrs	r3, r2
 8001386:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	3304      	adds	r3, #4
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	6a3a      	ldr	r2, [r7, #32]
 8001394:	429a      	cmp	r2, r3
 8001396:	d90a      	bls.n	80013ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f004 fdac 	bl	8005f00 <realloc>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013be:	429a      	cmp	r2, r3
 80013c0:	d236      	bcs.n	8001430 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	440a      	add	r2, r1
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d8:	3301      	adds	r3, #1
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4313      	orrs	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	3302      	adds	r3, #2
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	440b      	add	r3, r1
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	3303      	adds	r3, #3
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	440b      	add	r3, r1
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	4313      	orrs	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	3304      	adds	r3, #4
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	3301      	adds	r3, #1
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
 800142e:	e7c3      	b.n	80013b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	3301      	adds	r3, #1
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4313      	orrs	r3, r2
 800144a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	3302      	adds	r3, #2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	4313      	orrs	r3, r2
 800145c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001460:	3303      	adds	r3, #3
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	4313      	orrs	r3, r2
 800146e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001472:	3304      	adds	r3, #4
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	d90a      	bls.n	8001496 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f004 fd38 	bl	8005f00 <realloc>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d236      	bcs.n	8001518 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	440a      	add	r2, r1
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	3301      	adds	r3, #1
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	440b      	add	r3, r1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d2:	3302      	adds	r3, #2
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	440b      	add	r3, r1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	3303      	adds	r3, #3
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	440b      	add	r3, r1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80014f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fa:	3304      	adds	r3, #4
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	3214      	adds	r2, #20
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	3301      	adds	r3, #1
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001516:	e7c3      	b.n	80014a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	3301      	adds	r3, #1
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001536:	3302      	adds	r3, #2
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	3303      	adds	r3, #3
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155a:	3304      	adds	r3, #4
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	429a      	cmp	r2, r3
 8001566:	d90a      	bls.n	800157e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f004 fcc4 	bl	8005f00 <realloc>
 8001578:	4602      	mov	r2, r0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800158e:	429a      	cmp	r2, r3
 8001590:	d23f      	bcs.n	8001612 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fb19 	bl	8001bd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a6:	3304      	adds	r3, #4
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d20c      	bcs.n	80015d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	441a      	add	r2, r3
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	440b      	add	r3, r1
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3301      	adds	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
 80015d2:	e7ec      	b.n	80015ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80015d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	3b01      	subs	r3, #1
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80015e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e6:	3b01      	subs	r3, #1
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	441a      	add	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80015f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	3220      	adds	r2, #32
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	3301      	adds	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001610:	e7ba      	b.n	8001588 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001614:	4618      	mov	r0, r3
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	08006330 	.word	0x08006330

08001638 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	080062b8 	.word	0x080062b8

08001654 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
  }
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *roshuart;

    const static int rbuflen = RxBufLen;
    uint8_t rbuf[rbuflen];
    int rind;
    inline int getRdmaInd(void){ return (rbuflen - (int)__HAL_DMA_GET_COUNTER(roshuart->hdmarx)) & (rbuflen - 1); }
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_ZN13STM32HardwareC1Ev>:
    uint8_t tbuf[tbuflen];
    int twind, tfind;

  public:

    STM32Hardware():
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
      roshuart(0), rind(0), twind(0), tfind(0){ //we dont define port here, but addtionally call setPort()
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    }
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      roshuart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f804 	bl	8001708 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(roshuart, rbuf, rbuflen);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171c:	4619      	mov	r1, r3
 800171e:	f003 fb9f 	bl	8004e60 <HAL_UART_Receive_DMA>
    }
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZN13STM32Hardware4readEv>:

    int read(){
 800172a:	b590      	push	{r4, r7, lr}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001736:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffab 	bl	800169a <_ZN13STM32Hardware10getRdmaIndEv>
 8001744:	4603      	mov	r3, r0
 8001746:	429c      	cmp	r4, r3
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d011      	beq.n	8001778 <_ZN13STM32Hardware4readEv+0x4e>
        c = rbuf[rind++];
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800175a:	1c59      	adds	r1, r3, #1
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
      }
      return c;
 8001778:	68fb      	ldr	r3, [r7, #12]
    }
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}
	...

08001784 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((roshuart->gState == HAL_UART_STATE_READY) && !mutex){
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001792:	2b20      	cmp	r3, #32
 8001794:	d108      	bne.n	80017a8 <_ZN13STM32Hardware5flushEv+0x24>
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <_ZN13STM32Hardware5flushEv+0xa8>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f083 0301 	eor.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <_ZN13STM32Hardware5flushEv+0x24>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <_ZN13STM32Hardware5flushEv+0x26>
 80017a8:	2300      	movs	r3, #0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03a      	beq.n	8001824 <_ZN13STM32Hardware5flushEv+0xa0>
        mutex = true;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <_ZN13STM32Hardware5flushEv+0xa8>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d02c      	beq.n	800181e <_ZN13STM32Hardware5flushEv+0x9a>
        	int32_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80017d0:	429a      	cmp	r2, r3
 80017d2:	da07      	bge.n	80017e4 <_ZN13STM32Hardware5flushEv+0x60>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	e004      	b.n	80017ee <_ZN13STM32Hardware5flushEv+0x6a>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80017ea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017ee:	60fb      	str	r3, [r7, #12]
          HAL_UART_Transmit_DMA(roshuart, &(tbuf[tfind]), len);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80017fa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	b292      	uxth	r2, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f003 faac 	bl	8004d64 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	b2da      	uxtb	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        }
        mutex = false;
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <_ZN13STM32Hardware5flushEv+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
      }
    }
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000090 	.word	0x20000090

08001830 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
      int n = length;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	613b      	str	r3, [r7, #16]
      n = n <= tbuflen ? n : tbuflen;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001846:	dc03      	bgt.n	8001850 <_ZN13STM32Hardware5writeEPhi+0x20>
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e001      	b.n	8001854 <_ZN13STM32Hardware5writeEPhi+0x24>
 8001850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001854:	613b      	str	r3, [r7, #16]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800185c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4293      	cmp	r3, r2
 8001864:	bfa8      	it	ge
 8001866:	4613      	movge	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
      memcpy(&(tbuf[twind]), data, n_tail);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001870:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	4618      	mov	r0, r3
 800187e:	f004 fb29 	bl	8005ed4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4413      	add	r3, r2
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

      if(n != n_tail){
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	d00b      	beq.n	80018b4 <_ZN13STM32Hardware5writeEPhi+0x84>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f503 7084 	add.w	r0, r3, #264	; 0x108
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	18d1      	adds	r1, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	f004 fb10 	bl	8005ed4 <memcpy>
      }

      flush();
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7ff ff65 	bl	8001784 <_ZN13STM32Hardware5flushEv>
    }
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_ZN13STM32Hardware7setPortEP20__UART_HandleTypeDef>:

    void setPort(UART_HandleTypeDef *huart_){
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
    	roshuart = huart_;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	601a      	str	r2, [r3, #0]
    	init();
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff0d 	bl	80016f2 <_ZN13STM32Hardware4initEv>
    }
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZN13STM32Hardware4timeEv>:



    unsigned long time(){ return HAL_GetTick();; }
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	f001 fa4a 	bl	8002d80 <HAL_GetTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_UART_TxCpltCallback>:

RosserialNode rosserialNode; //Global variable

/*If you already have your own HAL_UART_TxCpltCallback function, just put the TxCallback() function inside of your code.and comment out below */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	rosserialNode.TxCallback(huart);
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <HAL_UART_TxCpltCallback+0x18>)
 8001904:	f000 f91b 	bl	8001b3e <_ZN13RosserialNode10TxCallbackEP20__UART_HandleTypeDef>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000094 	.word	0x20000094

08001914 <HAL_UART_RxCpltCallback>:

/*If you already have your own HAL_UART_RxCpltCallback function, just put the RxCallback() function inside of your code.and comment out below */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	rosserialNode.RxCallback(huart);
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4803      	ldr	r0, [pc, #12]	; (800192c <HAL_UART_RxCpltCallback+0x18>)
 8001920:	f000 f924 	bl	8001b6c <_ZN13RosserialNode10RxCallbackEP20__UART_HandleTypeDef>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000094 	.word	0x20000094

08001930 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	08006398 	.word	0x08006398

08001950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffe8 	bl	8001930 <_ZN3ros15NodeHandleBase_C1Ev>
 8001960:	4a36      	ldr	r2, [pc, #216]	; (8001a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fea7 	bl	80016be <_ZN13STM32HardwareC1Ev>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f004 faa7 	bl	8005ef0 <memset>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80019a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 fa9e 	bl	8005ef0 <memset>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80019ba:	2264      	movs	r2, #100	; 0x64
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 fa96 	bl	8005ef0 <memset>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80019ca:	2264      	movs	r2, #100	; 0x64
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 fa8e 	bl	8005ef0 <memset>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fb46 	bl	80010bc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	08006354 	.word	0x08006354

08001a40 <_ZN13RosserialNodeC1Ev>:
#endif




RosserialNode::RosserialNode() :
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
#endif
#if SUBSCRIBER_NUMBER >= 3
								 Subscriber3_Name(Subscriber3_TopicName, &Subscriber3_CallbackFunc_Name),
#endif
								rosuart(&(DEFAULT_ROS_HUART)),
								 initiatedFlag(0)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe febe 	bl	80007cc <_ZN8std_msgs7Float64C1Ev>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f103 0008 	add.w	r0, r3, #8
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	491c      	ldr	r1, [pc, #112]	; (8001acc <_ZN13RosserialNodeC1Ev+0x8c>)
 8001a5c:	f7ff fdfa 	bl	8001654 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	331c      	adds	r3, #28
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe ff17 	bl	8000898 <_ZN8std_msgs6StringC1Ev>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8001a70:	2301      	movs	r3, #1
 8001a72:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <_ZN13RosserialNodeC1Ev+0x90>)
 8001a74:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <_ZN13RosserialNodeC1Ev+0x94>)
 8001a76:	f000 f8e3 	bl	8001c40 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <_ZN13RosserialNodeC1Ev+0x98>)
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3344      	adds	r3, #68	; 0x44
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff63 	bl	8001950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
{
	setPort(rosuart);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f81f 	bl	8001adc <_ZN13RosserialNode7setPortEP20__UART_HandleTypeDef>

#if PUBLISHER_NUMBER >= 1
	nh.advertise(Publisher1_Name);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f000 f8ec 	bl	8001c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
#endif
#if PUBLISHER_NUMBER >= 3
	nh.advertise(Publisher3_Name);
#endif
#if SUBSCRIBER_NUMBER >= 1
	nh.subscribe(Subscriber1_Name);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3324      	adds	r3, #36	; 0x24
 8001aba:	4619      	mov	r1, r3
 8001abc:	4610      	mov	r0, r2
 8001abe:	f000 f913 	bl	8001ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(Subscriber2_Name);
#endif
#if SUBSCRIBER_NUMBER >= 3
	nh.subscribe(Subscriber3_Name);
#endif
};
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	080062dc 	.word	0x080062dc
 8001ad0:	0800291d 	.word	0x0800291d
 8001ad4:	080062e8 	.word	0x080062e8
 8001ad8:	20000884 	.word	0x20000884

08001adc <_ZN13RosserialNode7setPortEP20__UART_HandleTypeDef>:

void RosserialNode::setPort(UART_HandleTypeDef *huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	rosuart = huart;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
	nh.getHardware()->setPort(huart);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3344      	adds	r3, #68	; 0x44
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f924 	bl	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001af6:	4603      	mov	r3, r0
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fee1 	bl	80018c2 <_ZN13STM32Hardware7setPortEP20__UART_HandleTypeDef>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN13RosserialNode8spinOnceEv>:
/********************** put spinOnce() in loop routine*******************
 loop{
 rosserialNode.spinOnce();
 }*/
void RosserialNode::spinOnce()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	//The initialization process of nh.init() has to be done after HAL Uart configurations.
	//we combine the code here.
	if(!initiatedFlag)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3780 	ldrb.w	r3, [r3, #1920]	; 0x780
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <_ZN13RosserialNode8spinOnceEv+0x24>
	{
		nh.initNode();
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3344      	adds	r3, #68	; 0x44
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f919 	bl	8001d56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
		initiatedFlag=1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
	}
	nh.spinOnce();
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3344      	adds	r3, #68	; 0x44
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f92d 	bl	8001d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_ZN13RosserialNode10TxCallbackEP20__UART_HandleTypeDef>:

void RosserialNode::TxCallback(UART_HandleTypeDef *huart)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
	if (rosuart == huart)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d108      	bne.n	8001b64 <_ZN13RosserialNode10TxCallbackEP20__UART_HandleTypeDef+0x26>
	{
		nh.getHardware()->flush();
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3344      	adds	r3, #68	; 0x44
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f8f1 	bl	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fe10 	bl	8001784 <_ZN13STM32Hardware5flushEv>
	}
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN13RosserialNode10RxCallbackEP20__UART_HandleTypeDef>:

void RosserialNode::RxCallback(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	if (rosuart == huart)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d108      	bne.n	8001b92 <_ZN13RosserialNode10RxCallbackEP20__UART_HandleTypeDef+0x26>
	{
		nh.getHardware()->reset_rbuf();
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3344      	adds	r3, #68	; 0x44
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f8da 	bl	8001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fdbb 	bl	8001708 <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d80d      	bhi.n	8001bca <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	fa22 f103 	lsr.w	r1, r2, r3
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e7ee      	b.n	8001ba8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d811      	bhi.n	8001c14 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	440a      	add	r2, r1
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	00d2      	lsls	r2, r2, #3
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e7ea      	b.n	8001bea <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	08006380 	.word	0x08006380

08001c40 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ffe5 	bl	8001c20 <_ZN3ros11Subscriber_C1Ev>
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fe19 	bl	8000898 <_ZN8std_msgs6StringC1Ev>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	609a      	str	r2, [r3, #8]
  };
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	08006368 	.word	0x08006368

08001c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b18      	cmp	r3, #24
 8001c9a:	dc1e      	bgt.n	8001cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d111      	bne.n	8001cd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	60da      	str	r2, [r3, #12]
        return true;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e004      	b.n	8001cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e7dd      	b.n	8001c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001cda:	2300      	movs	r3, #0
  }
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b18      	cmp	r3, #24
 8001cfa:	dc19      	bgt.n	8001d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	605a      	str	r2, [r3, #4]
        return true;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e004      	b.n	8001d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e7e2      	b.n	8001cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8001d30:	2300      	movs	r3, #0
  }
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
  }
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3304      	adds	r3, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fcc5 	bl	80016f2 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
    bytes_ = 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
    index_ = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
    topic_ = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
  };
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fd9f 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8001da2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d903      	bls.n	8001dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
    if (mode_ != MODE_FIRST_FF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d009      	beq.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d903      	bls.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
      if (spin_timeout_ > 0)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d014      	beq.n	8001e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fd78 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad2      	subs	r2, r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	bf8c      	ite	hi
 8001e00:	2301      	movhi	r3, #1
 8001e02:	2300      	movls	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001e0a:	f06f 0301 	mvn.w	r3, #1
 8001e0e:	e194      	b.n	800213a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3304      	adds	r3, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fc88 	bl	800172a <_ZN13STM32Hardware4readEv>
 8001e1a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f2c0 8174 	blt.w	800210c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8d3 26fc 	ldr.w	r2, [r3, #1788]	; 0x6fc
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	441a      	add	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001e3a:	2b07      	cmp	r3, #7
 8001e3c:	d11e      	bne.n	8001e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8001e44:	1c59      	adds	r1, r3, #1
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	f8c2 16f8 	str.w	r1, [r2, #1784]	; 0x6f8
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	b2d1      	uxtb	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	460a      	mov	r2, r1
 8001e56:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
        bytes_--;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1b4      	bne.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2208      	movs	r2, #8
 8001e76:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 8001e7a:	e7af      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d128      	bne.n	8001ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2bff      	cmp	r3, #255	; 0xff
 8001e8a:	d10d      	bne.n	8001ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f103 0214 	add.w	r2, r3, #20
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 8001ea6:	e799      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fd17 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	bf8c      	ite	hi
 8001ec0:	2301      	movhi	r3, #1
 8001ec2:	2300      	movls	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d088      	beq.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
          return SPIN_TIMEOUT;
 8001ed2:	f06f 0301 	mvn.w	r3, #1
 8001ed6:	e130      	b.n	800213a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d118      	bne.n	8001f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2bfe      	cmp	r3, #254	; 0xfe
 8001ee6:	d107      	bne.n	8001ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 8001ef6:	e771      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
          if (configured_ == false)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f47f af68 	bne.w	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f918 	bl	8002142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001f12:	e763      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d113      	bne.n	8001f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
        index_ = 0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
        mode_++;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
 8001f44:	e74a      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d110      	bne.n	8001f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 26f0 	ldr.w	r2, [r3, #1776]	; 0x6f0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	441a      	add	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
        mode_++;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 8001f70:	e734      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d116      	bne.n	8001faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 8001f82:	425a      	negs	r2, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	bf58      	it	pl
 8001f8a:	4253      	negpl	r3, r2
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d107      	bne.n	8001fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 8001f9e:	e71d      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 8001fa8:	e718      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d10f      	bne.n	8001fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
        mode_++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
        checksum_ = data;               /* first byte included in checksum */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
 8001fd2:	e703      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d117      	bne.n	800200e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 26f4 	ldr.w	r2, [r3, #1780]	; 0x6f4
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
        mode_ = MODE_MESSAGE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
        if (bytes_ == 0)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f47f aeec 	bne.w	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2208      	movs	r2, #8
 8002008:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 800200c:	e6e6      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8002014:	2b08      	cmp	r3, #8
 8002016:	f47f aee1 	bne.w	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
        if ((checksum_ % 256) == 255)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 8002028:	425a      	negs	r2, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	bf58      	it	pl
 8002030:	4253      	negpl	r3, r2
 8002032:	2bff      	cmp	r3, #255	; 0xff
 8002034:	f47f aed2 	bne.w	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d110      	bne.n	8002064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f87d 	bl	8002142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f898 	bl	800217e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
            last_sync_receive_time = c_time;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
            return SPIN_ERR;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002062:	e06a      	b.n	800213a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 800206a:	2b0a      	cmp	r3, #10
 800206c:	d107      	bne.n	800207e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f960 	bl	800233c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800207c:	e6ae      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8002084:	2b06      	cmp	r3, #6
 8002086:	d10e      	bne.n	80020a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f203 7214 	addw	r2, r3, #1812	; 0x714
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f7ff f94f 	bl	800133a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
 80020a4:	e69a      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 80020ac:	2b0b      	cmp	r3, #11
 80020ae:	d104      	bne.n	80020ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 80020b8:	e690      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 80020c0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80020ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f43f ae84 	beq.w	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 80020da:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80020e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 80020ee:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80020f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8002106:	4611      	mov	r1, r2
 8002108:	4798      	blx	r3
    while (true)
 800210a:	e667      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800210c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00f      	beq.n	8002138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002126:	4293      	cmp	r3, r2
 8002128:	d906      	bls.n	8002138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f809 	bl	8002142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    return SPIN_OK;
 8002138:	2300      	movs	r3, #0
  }
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fc50 	bl	80009f4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	210a      	movs	r1, #10
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
    rt_time = hardware_.time();
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fbb9 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 800216e:	4602      	mov	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800217e:	b590      	push	{r4, r7, lr}
 8002180:	b08b      	sub	sp, #44	; 0x2c
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fd22 	bl	8000bd4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	2b18      	cmp	r3, #24
 8002198:	dc63      	bgt.n	8002262 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d056      	beq.n	800225a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3308      	adds	r3, #8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4798      	blx	r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4608      	mov	r0, r1
 8002228:	4798      	blx	r3
 800222a:	4603      	mov	r3, r0
 800222c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800222e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002232:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681c      	ldr	r4, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fa1a 	bl	8001682 <_ZN3ros9Publisher15getEndpointTypeEv>
 800224e:	4601      	mov	r1, r0
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	461a      	mov	r2, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
 8002260:	e798      	b.n	8002194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	2b18      	cmp	r3, #24
 800226a:	dc5f      	bgt.n	800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d053      	beq.n	8002324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	b29b      	uxth	r3, r3
 800228c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 8002296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a2:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80022a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80022b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3308      	adds	r3, #8
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4608      	mov	r0, r1
 80022be:	4798      	blx	r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80022cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4608      	mov	r0, r1
 80022e4:	4798      	blx	r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80022ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ee:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681c      	ldr	r4, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fa:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80022fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4608      	mov	r0, r1
 8002316:	4798      	blx	r3
 8002318:	4601      	mov	r1, r0
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	461a      	mov	r2, r3
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	3301      	adds	r3, #1
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e79c      	b.n	8002266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
  }
 8002334:	bf00      	nop
 8002336:	372c      	adds	r7, #44	; 0x2c
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}

0800233c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fb52 	bl	80009f4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fac3 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 800235a:	4602      	mov	r2, r0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fbb1 	bl	8000ad4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	4915      	ldr	r1, [pc, #84]	; (80023cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002378:	fba1 1303 	umull	r1, r3, r1, r3
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002382:	6939      	ldr	r1, [r7, #16]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002388:	fba3 0302 	umull	r0, r3, r3, r2
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002392:	fb00 f303 	mul.w	r3, r0, r3
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	440b      	add	r3, r1
 80023a0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	3304      	adds	r3, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8a4 	bl	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa93 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 80023ba:	4602      	mov	r2, r0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
  }
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	10624dd3 	.word	0x10624dd3
 80023d0:	000f4240 	.word	0x000f4240

080023d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b63      	cmp	r3, #99	; 0x63
 80023e4:	dd09      	ble.n	80023fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 80023ec:	f083 0301 	eor.w	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e077      	b.n	80024ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002406:	3207      	adds	r2, #7
 8002408:	4611      	mov	r1, r2
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
 800240e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	22ff      	movs	r2, #255	; 0xff
 8002414:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	22fe      	movs	r2, #254	; 0xfe
 800241c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	b29b      	uxth	r3, r3
 800242e:	121b      	asrs	r3, r3, #8
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 8002444:	4413      	add	r3, r2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	b21b      	sxth	r3, r3
 8002460:	121b      	asrs	r3, r3, #8
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800246e:	2305      	movs	r3, #5
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3306      	adds	r3, #6
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	429a      	cmp	r2, r3
 800247a:	dc0d      	bgt.n	8002498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4413      	add	r3, r2
 8002482:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3301      	adds	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e7ec      	b.n	8002472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3307      	adds	r3, #7
 800249c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	425a      	negs	r2, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	bf58      	it	pl
 80024a8:	4253      	negpl	r3, r2
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	6179      	str	r1, [r7, #20]
 80024b2:	43d2      	mvns	r2, r2
 80024b4:	b2d1      	uxtb	r1, r2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	460a      	mov	r2, r1
 80024bc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

    if (l <= OUTPUT_SIZE)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c6:	dc0a      	bgt.n	80024de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1d18      	adds	r0, r3, #4
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7ff f9ab 	bl	8001830 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	e005      	b.n	80024ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80024de:	4905      	ldr	r1, [pc, #20]	; (80024f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f849 	bl	8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	080062f4 	.word	0x080062f4

080024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f9ea 	bl	80018e0 <_ZN13STM32Hardware4timeEv>
 800250c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4915      	ldr	r1, [pc, #84]	; (800256c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002516:	fba1 1303 	umull	r1, r3, r1, r3
 800251a:	099b      	lsrs	r3, r3, #6
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800252e:	fba3 0302 	umull	r0, r3, r3, r2
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002538:	fb00 f303 	mul.w	r3, r0, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002540:	fb02 f303 	mul.w	r3, r2, r3
 8002544:	1aca      	subs	r2, r1, r3
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002548:	4413      	add	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 f89c 	bl	800269c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	10624dd3 	.word	0x10624dd3
 8002570:	000f4240 	.word	0x000f4240
 8002574:	3b9aca00 	.word	0x3b9aca00

08002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	2103      	movs	r1, #3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f804 	bl	8002594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	460b      	mov	r3, r1
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fcd8 	bl	8000f5c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80025ac:	7afb      	ldrb	r3, [r7, #11]
 80025ae:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f107 0214 	add.w	r2, r7, #20
 80025be:	2107      	movs	r1, #7
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	4798      	blx	r3
  }
 80025c4:	bf00      	nop
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_Z41__static_initialization_and_destruction_0ii>:
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <_Z41__static_initialization_and_destruction_0ii+0x20>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d102      	bne.n	80025ec <_Z41__static_initialization_and_destruction_0ii+0x20>
RosserialNode rosserialNode; //Global variable
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80025e8:	f7ff fa2a 	bl	8001a40 <_ZN13RosserialNodeC1Ev>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000094 	.word	0x20000094

080025f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    return configured_;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
  };
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	330c      	adds	r3, #12
 8002620:	6839      	ldr	r1, [r7, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe f979 	bl	800091a <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	320c      	adds	r2, #12
 8002630:	4610      	mov	r0, r2
 8002632:	4798      	blx	r3
  }
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
  }
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	330c      	adds	r3, #12
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe f999 	bl	8000998 <_ZN8std_msgs6String7getTypeEv>
 8002666:	4603      	mov	r3, r0
  }
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	330c      	adds	r3, #12
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe f999 	bl	80009b4 <_ZN8std_msgs6String6getMD5Ev>
 8002682:	4603      	mov	r3, r0
  }
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_GLOBAL__sub_I_rosserialNode>:
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
 8002690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002694:	2001      	movs	r0, #1
 8002696:	f7ff ff99 	bl	80025cc <_Z41__static_initialization_and_destruction_0ii>
 800269a:	bd80      	pop	{r7, pc}

0800269c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0a5a      	lsrs	r2, r3, #9
 80026ac:	490f      	ldr	r1, [pc, #60]	; (80026ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80026ae:	fba1 1202 	umull	r1, r2, r1, r2
 80026b2:	09d2      	lsrs	r2, r2, #7
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80026b6:	fb01 f202 	mul.w	r2, r1, r2
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0a5b      	lsrs	r3, r3, #9
 80026c4:	4a09      	ldr	r2, [pc, #36]	; (80026ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	09db      	lsrs	r3, r3, #7
 80026cc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	00044b83 	.word	0x00044b83
 80026f0:	3b9aca00 	.word	0x3b9aca00

080026f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f8:	f000 faf1 	bl	8002cde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fc:	f000 f80c 	bl	8002718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002700:	f000 f8da 	bl	80028b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002704:	f000 f8b2 	bl	800286c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002708:	f000 f880 	bl	800280c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
setup();
 800270c:	f000 f916 	bl	800293c <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	loop();
 8002710:	f000 f91c 	bl	800294c <loop>
 8002714:	e7fc      	b.n	8002710 <main+0x1c>
	...

08002718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0b8      	sub	sp, #224	; 0xe0
 800271c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800271e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002722:	2234      	movs	r2, #52	; 0x34
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fbe2 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800272c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	2290      	movs	r2, #144	; 0x90
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fbd3 	bl	8005ef0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <SystemClock_Config+0xec>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <SystemClock_Config+0xec>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <SystemClock_Config+0xec>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <SystemClock_Config+0xf0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800276a:	4a27      	ldr	r2, [pc, #156]	; (8002808 <SystemClock_Config+0xf0>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <SystemClock_Config+0xf0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002784:	2301      	movs	r3, #1
 8002786:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800278a:	2310      	movs	r3, #16
 800278c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800279a:	4618      	mov	r0, r3
 800279c:	f001 f9e8 	bl	8003b70 <HAL_RCC_OscConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027a6:	f000 f89f 	bl	80028e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027aa:	230f      	movs	r3, #15
 80027ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 fc7c 	bl	80040cc <HAL_RCC_ClockConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027da:	f000 f885 	bl	80028e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fe43 	bl	8004478 <HAL_RCCEx_PeriphCLKConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80027f8:	f000 f876 	bl	80028e8 <Error_Handler>
  }
}
 80027fc:	bf00      	nop
 80027fe:	37e0      	adds	r7, #224	; 0xe0
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000

0800280c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002812:	4a15      	ldr	r2, [pc, #84]	; (8002868 <MX_USART3_UART_Init+0x5c>)
 8002814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002818:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800281c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_USART3_UART_Init+0x58>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002832:	220c      	movs	r2, #12
 8002834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <MX_USART3_UART_Init+0x58>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_USART3_UART_Init+0x58>)
 800284a:	2200      	movs	r2, #0
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_USART3_UART_Init+0x58>)
 8002850:	f002 fa3a 	bl	8004cc8 <HAL_UART_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800285a:	f000 f845 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000884 	.word	0x20000884
 8002868:	40004800 	.word	0x40004800

0800286c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <MX_DMA_Init+0x48>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <MX_DMA_Init+0x48>)
 8002878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <MX_DMA_Init+0x48>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	200c      	movs	r0, #12
 8002890:	f000 fb81 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002894:	200c      	movs	r0, #12
 8002896:	f000 fb9a 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	200e      	movs	r0, #14
 80028a0:	f000 fb79 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028a4:	200e      	movs	r0, #14
 80028a6:	f000 fb92 	bl	8002fce <HAL_NVIC_EnableIRQ>

}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_GPIO_Init+0x2c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <MX_GPIO_Init+0x2c>)
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_GPIO_Init+0x2c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]

}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <Error_Handler+0x8>

080028f2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68d8      	ldr	r0, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6891      	ldr	r1, [r2, #8]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4798      	blx	r3
 8002910:	4603      	mov	r3, r0
  };
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <_Z12sub1CallbackRKN8std_msgs6StringE>:
#include "myMain.h"
#include "ros.h"



void sub1Callback(const std_msgs::String &msg){
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	rosserialNode.subData1.data = msg.data;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a03      	ldr	r2, [pc, #12]	; (8002938 <_Z12sub1CallbackRKN8std_msgs6StringE+0x1c>)
 800292a:	6213      	str	r3, [r2, #32]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	20000094 	.word	0x20000094

0800293c <setup>:

void setup(){
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <loop>:


void loop(){
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	rosserialNode.pubData1.data=1;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <loop+0x24>)
 8002952:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002956:	605a      	str	r2, [r3, #4]
	rosserialNode.publisher1.publish(&rosserialNode.pubData1);
 8002958:	4905      	ldr	r1, [pc, #20]	; (8002970 <loop+0x24>)
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <loop+0x28>)
 800295c:	f7ff ffc9 	bl	80028f2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	rosserialNode.spinOnce();
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <loop+0x24>)
 8002962:	f7ff f8d1 	bl	8001b08 <_ZN13RosserialNode8spinOnceEv>
	HAL_Delay(10);
 8002966:	200a      	movs	r0, #10
 8002968:	f000 fa16 	bl	8002d98 <HAL_Delay>
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000094 	.word	0x20000094
 8002974:	2000009c 	.word	0x2000009c

08002978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_MspInit+0x44>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <HAL_MspInit+0x44>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_MspInit+0x44>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_MspInit+0x44>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a08      	ldr	r2, [pc, #32]	; (80029bc <HAL_MspInit+0x44>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_MspInit+0x44>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800

080029c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <HAL_UART_MspInit+0x14c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	f040 808f 	bne.w	8002b02 <HAL_UART_MspInit+0x142>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029e4:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_UART_MspInit+0x150>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <HAL_UART_MspInit+0x150>)
 80029ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
 80029f0:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_UART_MspInit+0x150>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fc:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <HAL_UART_MspInit+0x150>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a43      	ldr	r2, [pc, #268]	; (8002b10 <HAL_UART_MspInit+0x150>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_UART_MspInit+0x150>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a26:	2307      	movs	r3, #7
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4838      	ldr	r0, [pc, #224]	; (8002b14 <HAL_UART_MspInit+0x154>)
 8002a32:	f000 fef1 	bl	8003818 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a38:	4a38      	ldr	r2, [pc, #224]	; (8002b1c <HAL_UART_MspInit+0x15c>)
 8002a3a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a42:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4a:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a56:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002a64:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a70:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a78:	4827      	ldr	r0, [pc, #156]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a7a:	f000 fac3 	bl	8003004 <HAL_DMA_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8002a84:	f7ff ff30 	bl	80028e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a8c:	671a      	str	r2, [r3, #112]	; 0x70
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_UART_MspInit+0x158>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002a94:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002a96:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <HAL_UART_MspInit+0x164>)
 8002a98:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002a9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aa0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ace:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ad6:	4812      	ldr	r0, [pc, #72]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002ad8:	f000 fa94 	bl	8003004 <HAL_DMA_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002ae2:	f7ff ff01 	bl	80028e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002aea:	66da      	str	r2, [r3, #108]	; 0x6c
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_UART_MspInit+0x160>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	2027      	movs	r0, #39	; 0x27
 8002af8:	f000 fa4d 	bl	8002f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002afc:	2027      	movs	r0, #39	; 0x27
 8002afe:	f000 fa66 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3728      	adds	r7, #40	; 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40004800 	.word	0x40004800
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	20000824 	.word	0x20000824
 8002b1c:	40026028 	.word	0x40026028
 8002b20:	20000908 	.word	0x20000908
 8002b24:	40026058 	.word	0x40026058

08002b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <NMI_Handler+0x4>

08002b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b32:	e7fe      	b.n	8002b32 <HardFault_Handler+0x4>

08002b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <MemManage_Handler+0x4>

08002b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3e:	e7fe      	b.n	8002b3e <BusFault_Handler+0x4>

08002b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <UsageFault_Handler+0x4>

08002b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b74:	f000 f8f0 	bl	8002d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <DMA1_Stream1_IRQHandler+0x10>)
 8002b82:	f000 fbdf 	bl	8003344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000824 	.word	0x20000824

08002b90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA1_Stream3_IRQHandler+0x10>)
 8002b96:	f000 fbd5 	bl	8003344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000908 	.word	0x20000908

08002ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <USART3_IRQHandler+0x10>)
 8002baa:	f002 f997 	bl	8004edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000884 	.word	0x20000884

08002bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
	return 1;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_kill>:

int _kill(int pid, int sig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bd2:	f003 f955 	bl	8005e80 <__errno>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2216      	movs	r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
	return -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_exit>:

void _exit (int status)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe7 	bl	8002bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bfa:	e7fe      	b.n	8002bfa <_exit+0x12>

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f003 f928 	bl	8005e80 <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20080000 	.word	0x20080000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	20000818 	.word	0x20000818
 8002c64:	20000980 	.word	0x20000980

08002c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <SystemInit+0x20>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <SystemInit+0x20>)
 8002c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c92:	490e      	ldr	r1, [pc, #56]	; (8002ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c98:	e002      	b.n	8002ca0 <LoopCopyDataInit>

08002c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9e:	3304      	adds	r3, #4

08002ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca4:	d3f9      	bcc.n	8002c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ca8:	4c0b      	ldr	r4, [pc, #44]	; (8002cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cac:	e001      	b.n	8002cb2 <LoopFillZerobss>

08002cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb0:	3204      	adds	r2, #4

08002cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb4:	d3fb      	bcc.n	8002cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cb6:	f7ff ffd7 	bl	8002c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cba:	f003 f8e7 	bl	8005e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cbe:	f7ff fd19 	bl	80026f4 <main>
  bx  lr    
 8002cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ccc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002cd0:	08006480 	.word	0x08006480
  ldr r2, =_sbss
 8002cd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002cd8:	2000097c 	.word	0x2000097c

08002cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC_IRQHandler>

08002cde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce2:	2003      	movs	r0, #3
 8002ce4:	f000 f94c 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce8:	200f      	movs	r0, #15
 8002cea:	f000 f805 	bl	8002cf8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002cee:	f7ff fe43 	bl	8002978 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x54>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x58>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f967 	bl	8002fea <HAL_SYSTICK_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00e      	b.n	8002d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d80a      	bhi.n	8002d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d34:	f000 f92f 	bl	8002f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <HAL_InitTick+0x5c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000008 	.word	0x20000008
 8002d54:	20000004 	.word	0x20000004

08002d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	20000968 	.word	0x20000968

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000968 	.word	0x20000968

08002d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7ff ffee 	bl	8002d80 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d005      	beq.n	8002dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_Delay+0x44>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dbe:	bf00      	nop
 8002dc0:	f7ff ffde 	bl	8002d80 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d8f7      	bhi.n	8002dc0 <HAL_Delay+0x28>
  {
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000008 	.word	0x20000008

08002de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <__NVIC_SetPriorityGrouping+0x40>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x40>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00
 8002e24:	05fa0000 	.word	0x05fa0000

08002e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <__NVIC_GetPriorityGrouping+0x18>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	f003 0307 	and.w	r3, r3, #7
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	db0b      	blt.n	8002e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4907      	ldr	r1, [pc, #28]	; (8002e7c <__NVIC_EnableIRQ+0x38>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2001      	movs	r0, #1
 8002e66:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100

08002e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db0a      	blt.n	8002eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	490c      	ldr	r1, [pc, #48]	; (8002ecc <__NVIC_SetPriority+0x4c>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea8:	e00a      	b.n	8002ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <__NVIC_SetPriority+0x50>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	761a      	strb	r2, [r3, #24]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2304      	movcs	r3, #4
 8002ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d902      	bls.n	8002f04 <NVIC_EncodePriority+0x30>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3b03      	subs	r3, #3
 8002f02:	e000      	b.n	8002f06 <NVIC_EncodePriority+0x32>
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	4313      	orrs	r3, r2
         );
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f4c:	d301      	bcc.n	8002f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00f      	b.n	8002f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <SysTick_Config+0x40>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f60:	f7ff ff8e 	bl	8002e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <SysTick_Config+0x40>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <SysTick_Config+0x40>)
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff29 	bl	8002de0 <__NVIC_SetPriorityGrouping>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff3e 	bl	8002e28 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff8e 	bl	8002ed4 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5d 	bl	8002e80 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff31 	bl	8002e44 <__NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ffa2 	bl	8002f3c <SysTick_Config>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff feb6 	bl	8002d80 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e099      	b.n	8003154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	e00f      	b.n	8003062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003042:	f7ff fe9d 	bl	8002d80 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b05      	cmp	r3, #5
 800304e:	d908      	bls.n	8003062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e078      	b.n	8003154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e8      	bne.n	8003042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_DMA_Init+0x158>)
 800307c:	4013      	ands	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d117      	bne.n	8003126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fb09 	bl	8003720 <DMA_CheckFifoParam>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003122:	2301      	movs	r3, #1
 8003124:	e016      	b.n	8003154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fac0 	bl	80036b4 <DMA_CalcBaseAndBitshift>
 8003134:	4603      	mov	r3, r0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	223f      	movs	r2, #63	; 0x3f
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	e010803f 	.word	0xe010803f

08003160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Start_IT+0x26>
 8003182:	2302      	movs	r3, #2
 8003184:	e048      	b.n	8003218 <HAL_DMA_Start_IT+0xb8>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d137      	bne.n	800320a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa52 	bl	8003658 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	223f      	movs	r2, #63	; 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0216 	orr.w	r2, r2, #22
 80031ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031de:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0208 	orr.w	r2, r2, #8
 80031f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	e005      	b.n	8003216 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003212:	2302      	movs	r3, #2
 8003214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003216:	7dfb      	ldrb	r3, [r7, #23]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800322e:	f7ff fda7 	bl	8002d80 <HAL_GetTick>
 8003232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d008      	beq.n	8003252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e052      	b.n	80032f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0216 	bic.w	r2, r2, #22
 8003260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <HAL_DMA_Abort+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0208 	bic.w	r2, r2, #8
 8003290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a2:	e013      	b.n	80032cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a4:	f7ff fd6c 	bl	8002d80 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d90c      	bls.n	80032cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2203      	movs	r2, #3
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e015      	b.n	80032f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e4      	bne.n	80032a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	223f      	movs	r2, #63	; 0x3f
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d004      	beq.n	800331e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00c      	b.n	8003338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2205      	movs	r2, #5
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_DMA_IRQHandler+0x258>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a92      	ldr	r2, [pc, #584]	; (80035a0 <HAL_DMA_IRQHandler+0x25c>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0a9b      	lsrs	r3, r3, #10
 800335c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2208      	movs	r2, #8
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01a      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0204 	bic.w	r2, r2, #4
 8003396:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2208      	movs	r2, #8
 800339e:	409a      	lsls	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2201      	movs	r2, #1
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d012      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2201      	movs	r2, #1
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2204      	movs	r2, #4
 80033ec:	409a      	lsls	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	2210      	movs	r2, #16
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d043      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d03c      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	2210      	movs	r2, #16
 8003440:	409a      	lsls	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d018      	beq.n	8003486 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d024      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
 8003472:	e01f      	b.n	80034b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e016      	b.n	80034b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0208 	bic.w	r2, r2, #8
 80034a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	2220      	movs	r2, #32
 80034ba:	409a      	lsls	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 808e 	beq.w	80035e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8086 	beq.w	80035e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2220      	movs	r2, #32
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d136      	bne.n	800355c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0216 	bic.w	r2, r2, #22
 80034fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_DMA_IRQHandler+0x1da>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0208 	bic.w	r2, r2, #8
 800352c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	223f      	movs	r2, #63	; 0x3f
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d07d      	beq.n	800364e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
        }
        return;
 800355a:	e078      	b.n	800364e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	2b00      	cmp	r3, #0
 800357e:	d030      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e02b      	b.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d027      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
 800359a:	e022      	b.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
 800359c:	20000000 	.word	0x20000000
 80035a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0210 	bic.w	r2, r2, #16
 80035c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d032      	beq.n	8003650 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d022      	beq.n	800363c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2205      	movs	r2, #5
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d307      	bcc.n	800362a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f2      	bne.n	800360e <HAL_DMA_IRQHandler+0x2ca>
 8003628:	e000      	b.n	800362c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800362a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
 800364c:	e000      	b.n	8003650 <HAL_DMA_IRQHandler+0x30c>
        return;
 800364e:	bf00      	nop
    }
  }
}
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop

08003658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003674:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d108      	bne.n	8003698 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003696:	e007      	b.n	80036a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3b10      	subs	r3, #16
 80036c4:	4a13      	ldr	r2, [pc, #76]	; (8003714 <DMA_CalcBaseAndBitshift+0x60>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <DMA_CalcBaseAndBitshift+0x64>)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d908      	bls.n	80036f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <DMA_CalcBaseAndBitshift+0x68>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	1d1a      	adds	r2, r3, #4
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	659a      	str	r2, [r3, #88]	; 0x58
 80036f2:	e006      	b.n	8003702 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <DMA_CalcBaseAndBitshift+0x68>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	aaaaaaab 	.word	0xaaaaaaab
 8003718:	08006464 	.word	0x08006464
 800371c:	fffffc00 	.word	0xfffffc00

08003720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11f      	bne.n	800377a <DMA_CheckFifoParam+0x5a>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d856      	bhi.n	80037ee <DMA_CheckFifoParam+0xce>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <DMA_CheckFifoParam+0x28>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	0800376b 	.word	0x0800376b
 8003750:	08003759 	.word	0x08003759
 8003754:	080037ef 	.word	0x080037ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d046      	beq.n	80037f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e043      	b.n	80037f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003772:	d140      	bne.n	80037f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003778:	e03d      	b.n	80037f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d121      	bne.n	80037c8 <DMA_CheckFifoParam+0xa8>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d837      	bhi.n	80037fa <DMA_CheckFifoParam+0xda>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <DMA_CheckFifoParam+0x70>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037a7 	.word	0x080037a7
 8003798:	080037a1 	.word	0x080037a1
 800379c:	080037b9 	.word	0x080037b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e030      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d025      	beq.n	80037fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b6:	e022      	b.n	80037fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037c0:	d11f      	bne.n	8003802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037c6:	e01c      	b.n	8003802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d903      	bls.n	80037d6 <DMA_CheckFifoParam+0xb6>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d003      	beq.n	80037dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037d4:	e018      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      break;
 80037da:	e015      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	e00b      	b.n	8003806 <DMA_CheckFifoParam+0xe6>
      break;
 80037ee:	bf00      	nop
 80037f0:	e00a      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
 80037f4:	e008      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
 80037f8:	e006      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037fa:	bf00      	nop
 80037fc:	e004      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;   
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
    }
  } 
  
  return status; 
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop

08003818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e175      	b.n	8003b24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	f040 8164 	bne.w	8003b1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d00b      	beq.n	8003876 <HAL_GPIO_Init+0x5e>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800386a:	2b11      	cmp	r3, #17
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b12      	cmp	r3, #18
 8003874:	d130      	bne.n	80038d8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ac:	2201      	movs	r2, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 0201 	and.w	r2, r3, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x100>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b12      	cmp	r3, #18
 8003916:	d123      	bne.n	8003960 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	220f      	movs	r2, #15
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	08da      	lsrs	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3208      	adds	r2, #8
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0203 	and.w	r2, r3, #3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80be 	beq.w	8003b1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a2:	4b66      	ldr	r3, [pc, #408]	; (8003b3c <HAL_GPIO_Init+0x324>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_GPIO_Init+0x324>)
 80039a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ac:	6453      	str	r3, [r2, #68]	; 0x44
 80039ae:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_GPIO_Init+0x324>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039ba:	4a61      	ldr	r2, [pc, #388]	; (8003b40 <HAL_GPIO_Init+0x328>)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	220f      	movs	r2, #15
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_GPIO_Init+0x32c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d037      	beq.n	8003a56 <HAL_GPIO_Init+0x23e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a57      	ldr	r2, [pc, #348]	; (8003b48 <HAL_GPIO_Init+0x330>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <HAL_GPIO_Init+0x23a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a56      	ldr	r2, [pc, #344]	; (8003b4c <HAL_GPIO_Init+0x334>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d02b      	beq.n	8003a4e <HAL_GPIO_Init+0x236>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a55      	ldr	r2, [pc, #340]	; (8003b50 <HAL_GPIO_Init+0x338>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d025      	beq.n	8003a4a <HAL_GPIO_Init+0x232>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a54      	ldr	r2, [pc, #336]	; (8003b54 <HAL_GPIO_Init+0x33c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01f      	beq.n	8003a46 <HAL_GPIO_Init+0x22e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a53      	ldr	r2, [pc, #332]	; (8003b58 <HAL_GPIO_Init+0x340>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_Init+0x22a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a52      	ldr	r2, [pc, #328]	; (8003b5c <HAL_GPIO_Init+0x344>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x226>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a51      	ldr	r2, [pc, #324]	; (8003b60 <HAL_GPIO_Init+0x348>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x222>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a50      	ldr	r2, [pc, #320]	; (8003b64 <HAL_GPIO_Init+0x34c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x21e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4f      	ldr	r2, [pc, #316]	; (8003b68 <HAL_GPIO_Init+0x350>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x21a>
 8003a2e:	2309      	movs	r3, #9
 8003a30:	e012      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a32:	230a      	movs	r3, #10
 8003a34:	e010      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a36:	2308      	movs	r3, #8
 8003a38:	e00e      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a3a:	2307      	movs	r3, #7
 8003a3c:	e00c      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a3e:	2306      	movs	r3, #6
 8003a40:	e00a      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a42:	2305      	movs	r3, #5
 8003a44:	e008      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a46:	2304      	movs	r3, #4
 8003a48:	e006      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e004      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e002      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_GPIO_Init+0x240>
 8003a56:	2300      	movs	r3, #0
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f002 0203 	and.w	r2, r2, #3
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	4093      	lsls	r3, r2
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a68:	4935      	ldr	r1, [pc, #212]	; (8003b40 <HAL_GPIO_Init+0x328>)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a9a:	4a34      	ldr	r2, [pc, #208]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003aa0:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac4:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aca:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aee:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b18:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <HAL_GPIO_Init+0x354>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	f67f ae86 	bls.w	8003838 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3724      	adds	r7, #36	; 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40021400 	.word	0x40021400
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	40021c00 	.word	0x40021c00
 8003b64:	40022000 	.word	0x40022000
 8003b68:	40022400 	.word	0x40022400
 8003b6c:	40013c00 	.word	0x40013c00

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e29b      	b.n	80040be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8087 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b94:	4b96      	ldr	r3, [pc, #600]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00c      	beq.n	8003bba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba0:	4b93      	ldr	r3, [pc, #588]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d112      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
 8003bac:	4b90      	ldr	r3, [pc, #576]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bba:	4b8d      	ldr	r3, [pc, #564]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d06c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x130>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d168      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e275      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x7a>
 8003bdc:	4b84      	ldr	r3, [pc, #528]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a83      	ldr	r2, [pc, #524]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e02e      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x9c>
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b7c      	ldr	r3, [pc, #496]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a7b      	ldr	r2, [pc, #492]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0xc0>
 8003c16:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a75      	ldr	r2, [pc, #468]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b73      	ldr	r3, [pc, #460]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a72      	ldr	r2, [pc, #456]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c30:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6e      	ldr	r2, [pc, #440]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6b      	ldr	r2, [pc, #428]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7ff f896 	bl	8002d80 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7ff f892 	bl	8002d80 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e229      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe8>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7ff f882 	bl	8002d80 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7ff f87e 	bl	8002d80 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e215      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b57      	ldr	r3, [pc, #348]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x110>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d069      	beq.n	8003d82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cae:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x190>
 8003cc6:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x17a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1e9      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	493d      	ldr	r1, [pc, #244]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e040      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d023      	beq.n	8003d50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7ff f834 	bl	8002d80 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7ff f830 	bl	8002d80 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1c7      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4929      	ldr	r1, [pc, #164]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
 8003d4e:	e018      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d50:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7ff f810 	bl	8002d80 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d64:	f7ff f80c 	bl	8002d80 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1a3      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d038      	beq.n	8003e00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d019      	beq.n	8003dca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d96:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9a:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fe ffed 	bl	8002d80 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fe ffe9 	bl	8002d80 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e180      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x23a>
 8003dc8:	e01a      	b.n	8003e00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dce:	4a08      	ldr	r2, [pc, #32]	; (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fe ffd3 	bl	8002d80 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fe ffcf 	bl	8002d80 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d903      	bls.n	8003df4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e166      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
 8003df0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	4b92      	ldr	r3, [pc, #584]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ee      	bne.n	8003dde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a4 	beq.w	8003f56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b8c      	ldr	r3, [pc, #560]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4b89      	ldr	r3, [pc, #548]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a88      	ldr	r2, [pc, #544]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b86      	ldr	r3, [pc, #536]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e36:	4b83      	ldr	r3, [pc, #524]	; (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d118      	bne.n	8003e74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e42:	4b80      	ldr	r3, [pc, #512]	; (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7f      	ldr	r2, [pc, #508]	; (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe ff97 	bl	8002d80 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7fe ff93 	bl	8002d80 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b64      	cmp	r3, #100	; 0x64
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e12a      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	4b76      	ldr	r3, [pc, #472]	; (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCC_OscConfig+0x31a>
 8003e7c:	4b70      	ldr	r3, [pc, #448]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a6f      	ldr	r2, [pc, #444]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	e02d      	b.n	8003ee6 <HAL_RCC_OscConfig+0x376>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x33c>
 8003e92:	4b6b      	ldr	r3, [pc, #428]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a6a      	ldr	r2, [pc, #424]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	4b68      	ldr	r3, [pc, #416]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a67      	ldr	r2, [pc, #412]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eaa:	e01c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x376>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d10c      	bne.n	8003ece <HAL_RCC_OscConfig+0x35e>
 8003eb4:	4b62      	ldr	r3, [pc, #392]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a61      	ldr	r2, [pc, #388]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ecc:	e00b      	b.n	8003ee6 <HAL_RCC_OscConfig+0x376>
 8003ece:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	4b59      	ldr	r3, [pc, #356]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	f023 0304 	bic.w	r3, r3, #4
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d015      	beq.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fe ff47 	bl	8002d80 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fe ff43 	bl	8002d80 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0d8      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ee      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x386>
 8003f18:	e014      	b.n	8003f44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fe ff31 	bl	8002d80 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fe ff2d 	bl	8002d80 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0c2      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	4b41      	ldr	r3, [pc, #260]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ee      	bne.n	8003f22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80ae 	beq.w	80040bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f60:	4b37      	ldr	r3, [pc, #220]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d06d      	beq.n	8004048 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d14b      	bne.n	800400c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	4b32      	ldr	r3, [pc, #200]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a31      	ldr	r2, [pc, #196]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe fefe 	bl	8002d80 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe fefa 	bl	8002d80 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e091      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b29      	ldr	r3, [pc, #164]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	491b      	ldr	r1, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fecc 	bl	8002d80 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe fec8 	bl	8002d80 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e05f      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x47c>
 800400a:	e057      	b.n	80040bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe feb2 	bl	8002d80 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fe feae 	bl	8002d80 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x4b0>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x54c>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004048:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <HAL_RCC_OscConfig+0x558>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d030      	beq.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d129      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d122      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800407e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004080:	4293      	cmp	r3, r2
 8004082:	d119      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d10f      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0d0      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d910      	bls.n	8004114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b67      	ldr	r3, [pc, #412]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 020f 	bic.w	r2, r3, #15
 80040fa:	4965      	ldr	r1, [pc, #404]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b63      	ldr	r3, [pc, #396]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b8      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800412c:	4b59      	ldr	r3, [pc, #356]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a58      	ldr	r2, [pc, #352]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004136:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004144:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a52      	ldr	r2, [pc, #328]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800414e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b50      	ldr	r3, [pc, #320]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	494d      	ldr	r1, [pc, #308]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d040      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d115      	bne.n	80041ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b41      	ldr	r3, [pc, #260]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e073      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3d      	ldr	r3, [pc, #244]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e06b      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b39      	ldr	r3, [pc, #228]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4936      	ldr	r1, [pc, #216]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fe fdde 	bl	8002d80 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fe fdda 	bl	8002d80 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e053      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b27      	ldr	r3, [pc, #156]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d210      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 020f 	bic.w	r2, r3, #15
 8004206:	4922      	ldr	r1, [pc, #136]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e032      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4916      	ldr	r1, [pc, #88]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	490e      	ldr	r1, [pc, #56]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800425e:	f000 f821 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8004262:	4602      	mov	r2, r0
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	490a      	ldr	r1, [pc, #40]	; (8004298 <HAL_RCC_ClockConfig+0x1cc>)
 8004270:	5ccb      	ldrb	r3, [r1, r3]
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_ClockConfig+0x1d0>)
 8004278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1d4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fd3a 	bl	8002cf8 <HAL_InitTick>

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023c00 	.word	0x40023c00
 8004294:	40023800 	.word	0x40023800
 8004298:	0800644c 	.word	0x0800644c
 800429c:	20000000 	.word	0x20000000
 80042a0:	20000004 	.word	0x20000004

080042a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042aa:	2100      	movs	r1, #0
 80042ac:	6079      	str	r1, [r7, #4]
 80042ae:	2100      	movs	r1, #0
 80042b0:	60f9      	str	r1, [r7, #12]
 80042b2:	2100      	movs	r1, #0
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042b6:	2100      	movs	r1, #0
 80042b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ba:	4952      	ldr	r1, [pc, #328]	; (8004404 <HAL_RCC_GetSysClockFreq+0x160>)
 80042bc:	6889      	ldr	r1, [r1, #8]
 80042be:	f001 010c 	and.w	r1, r1, #12
 80042c2:	2908      	cmp	r1, #8
 80042c4:	d00d      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80042c6:	2908      	cmp	r1, #8
 80042c8:	f200 8094 	bhi.w	80043f4 <HAL_RCC_GetSysClockFreq+0x150>
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x32>
 80042d0:	2904      	cmp	r1, #4
 80042d2:	d003      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x38>
 80042d4:	e08e      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_GetSysClockFreq+0x164>)
 80042d8:	60bb      	str	r3, [r7, #8]
      break;
 80042da:	e08e      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042dc:	4b4b      	ldr	r3, [pc, #300]	; (800440c <HAL_RCC_GetSysClockFreq+0x168>)
 80042de:	60bb      	str	r3, [r7, #8]
      break;
 80042e0:	e08b      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e2:	4948      	ldr	r1, [pc, #288]	; (8004404 <HAL_RCC_GetSysClockFreq+0x160>)
 80042e4:	6849      	ldr	r1, [r1, #4]
 80042e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042ea:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042ec:	4945      	ldr	r1, [pc, #276]	; (8004404 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ee:	6849      	ldr	r1, [r1, #4]
 80042f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d024      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f8:	4942      	ldr	r1, [pc, #264]	; (8004404 <HAL_RCC_GetSysClockFreq+0x160>)
 80042fa:	6849      	ldr	r1, [r1, #4]
 80042fc:	0989      	lsrs	r1, r1, #6
 80042fe:	4608      	mov	r0, r1
 8004300:	f04f 0100 	mov.w	r1, #0
 8004304:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004308:	f04f 0500 	mov.w	r5, #0
 800430c:	ea00 0204 	and.w	r2, r0, r4
 8004310:	ea01 0305 	and.w	r3, r1, r5
 8004314:	493d      	ldr	r1, [pc, #244]	; (800440c <HAL_RCC_GetSysClockFreq+0x168>)
 8004316:	fb01 f003 	mul.w	r0, r1, r3
 800431a:	2100      	movs	r1, #0
 800431c:	fb01 f102 	mul.w	r1, r1, r2
 8004320:	1844      	adds	r4, r0, r1
 8004322:	493a      	ldr	r1, [pc, #232]	; (800440c <HAL_RCC_GetSysClockFreq+0x168>)
 8004324:	fba2 0101 	umull	r0, r1, r2, r1
 8004328:	1863      	adds	r3, r4, r1
 800432a:	4619      	mov	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	461a      	mov	r2, r3
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	f7fb ff88 	bl	8000248 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e04a      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b30      	ldr	r3, [pc, #192]	; (8004404 <HAL_RCC_GetSysClockFreq+0x160>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	461a      	mov	r2, r3
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	ea02 0400 	and.w	r4, r2, r0
 800435a:	ea03 0501 	and.w	r5, r3, r1
 800435e:	4620      	mov	r0, r4
 8004360:	4629      	mov	r1, r5
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	014b      	lsls	r3, r1, #5
 800436c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004370:	0142      	lsls	r2, r0, #5
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	1b00      	subs	r0, r0, r4
 8004378:	eb61 0105 	sbc.w	r1, r1, r5
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	018b      	lsls	r3, r1, #6
 8004386:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800438a:	0182      	lsls	r2, r0, #6
 800438c:	1a12      	subs	r2, r2, r0
 800438e:	eb63 0301 	sbc.w	r3, r3, r1
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	00d9      	lsls	r1, r3, #3
 800439c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043a0:	00d0      	lsls	r0, r2, #3
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	1912      	adds	r2, r2, r4
 80043a8:	eb45 0303 	adc.w	r3, r5, r3
 80043ac:	f04f 0000 	mov.w	r0, #0
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	0299      	lsls	r1, r3, #10
 80043b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ba:	0290      	lsls	r0, r2, #10
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	f7fb ff3c 	bl	8000248 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_RCC_GetSysClockFreq+0x160>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	3301      	adds	r3, #1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
      break;
 80043f2:	e002      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_RCC_GetSysClockFreq+0x164>)
 80043f6:	60bb      	str	r3, [r7, #8]
      break;
 80043f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fa:	68bb      	ldr	r3, [r7, #8]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bdb0      	pop	{r4, r5, r7, pc}
 8004404:	40023800 	.word	0x40023800
 8004408:	00f42400 	.word	0x00f42400
 800440c:	017d7840 	.word	0x017d7840

08004410 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCC_GetHCLKFreq+0x14>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000000 	.word	0x20000000

08004428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800442c:	f7ff fff0 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0a9b      	lsrs	r3, r3, #10
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	0800645c 	.word	0x0800645c

08004450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004454:	f7ff ffdc 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0b5b      	lsrs	r3, r3, #13
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4903      	ldr	r1, [pc, #12]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	0800645c 	.word	0x0800645c

08004478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d012      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044a0:	4b69      	ldr	r3, [pc, #420]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a68      	ldr	r2, [pc, #416]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044aa:	6093      	str	r3, [r2, #8]
 80044ac:	4b66      	ldr	r3, [pc, #408]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	4964      	ldr	r1, [pc, #400]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d017      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d2:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	4959      	ldr	r1, [pc, #356]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f0:	d101      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d017      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800450e:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004514:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	494a      	ldr	r1, [pc, #296]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800453a:	2301      	movs	r3, #1
 800453c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800454a:	2301      	movs	r3, #1
 800454c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 808b 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800455c:	4b3a      	ldr	r3, [pc, #232]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4a39      	ldr	r2, [pc, #228]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6413      	str	r3, [r2, #64]	; 0x40
 8004568:	4b37      	ldr	r3, [pc, #220]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004574:	4b35      	ldr	r3, [pc, #212]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a34      	ldr	r2, [pc, #208]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800457a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004580:	f7fe fbfe 	bl	8002d80 <HAL_GetTick>
 8004584:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004588:	f7fe fbfa 	bl	8002d80 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e38f      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800459a:	4b2c      	ldr	r3, [pc, #176]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d035      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d02e      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045c4:	4b20      	ldr	r3, [pc, #128]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045ec:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d114      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fe fbc2 	bl	8002d80 <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fe fbbe 	bl	8002d80 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e351      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ee      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462e:	d111      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800463e:	400b      	ands	r3, r1
 8004640:	4901      	ldr	r1, [pc, #4]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
 8004646:	e00b      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004648:	40023800 	.word	0x40023800
 800464c:	40007000 	.word	0x40007000
 8004650:	0ffffcff 	.word	0x0ffffcff
 8004654:	4bb3      	ldr	r3, [pc, #716]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4ab2      	ldr	r2, [pc, #712]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800465e:	6093      	str	r3, [r2, #8]
 8004660:	4bb0      	ldr	r3, [pc, #704]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	49ad      	ldr	r1, [pc, #692]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466e:	4313      	orrs	r3, r2
 8004670:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	d010      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800467e:	4ba9      	ldr	r3, [pc, #676]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004684:	4aa7      	ldr	r2, [pc, #668]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800468a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800468e:	4ba5      	ldr	r3, [pc, #660]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004690:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	49a2      	ldr	r1, [pc, #648]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ac:	4b9d      	ldr	r3, [pc, #628]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ba:	499a      	ldr	r1, [pc, #616]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ce:	4b95      	ldr	r3, [pc, #596]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046dc:	4991      	ldr	r1, [pc, #580]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046f0:	4b8c      	ldr	r3, [pc, #560]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046fe:	4989      	ldr	r1, [pc, #548]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004712:	4b84      	ldr	r3, [pc, #528]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4980      	ldr	r1, [pc, #512]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004734:	4b7b      	ldr	r3, [pc, #492]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f023 0203 	bic.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	4978      	ldr	r1, [pc, #480]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004756:	4b73      	ldr	r3, [pc, #460]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f023 020c 	bic.w	r2, r3, #12
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004764:	496f      	ldr	r1, [pc, #444]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004778:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	4967      	ldr	r1, [pc, #412]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800479a:	4b62      	ldr	r3, [pc, #392]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a8:	495e      	ldr	r1, [pc, #376]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047bc:	4b59      	ldr	r3, [pc, #356]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	4956      	ldr	r1, [pc, #344]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047de:	4b51      	ldr	r3, [pc, #324]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	494d      	ldr	r1, [pc, #308]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004800:	4b48      	ldr	r3, [pc, #288]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	4945      	ldr	r1, [pc, #276]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004822:	4b40      	ldr	r3, [pc, #256]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004830:	493c      	ldr	r1, [pc, #240]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004844:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004852:	4934      	ldr	r1, [pc, #208]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d011      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004874:	492b      	ldr	r1, [pc, #172]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004896:	2301      	movs	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048a6:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b4:	491b      	ldr	r1, [pc, #108]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048c8:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d8:	4912      	ldr	r1, [pc, #72]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	4909      	ldr	r1, [pc, #36]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00f      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004916:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	e002      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800
 8004928:	4986      	ldr	r1, [pc, #536]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00b      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800493c:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004942:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494c:	497d      	ldr	r1, [pc, #500]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d006      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80d6 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004968:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a75      	ldr	r2, [pc, #468]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004974:	f7fe fa04 	bl	8002d80 <HAL_GetTick>
 8004978:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800497c:	f7fe fa00 	bl	8002d80 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	; 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e195      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800498e:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d021      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d11d      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049ae:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c2:	0e1b      	lsrs	r3, r3, #24
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	019a      	lsls	r2, r3, #6
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	071b      	lsls	r3, r3, #28
 80049e2:	4958      	ldr	r1, [pc, #352]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d004      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02e      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d129      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a16:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a24:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2a:	0f1b      	lsrs	r3, r3, #28
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	019a      	lsls	r2, r3, #6
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	061b      	lsls	r3, r3, #24
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	071b      	lsls	r3, r3, #28
 8004a4a:	493e      	ldr	r1, [pc, #248]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a52:	4b3c      	ldr	r3, [pc, #240]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a58:	f023 021f 	bic.w	r2, r3, #31
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	3b01      	subs	r3, #1
 8004a62:	4938      	ldr	r1, [pc, #224]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01d      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a76:	4b33      	ldr	r3, [pc, #204]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7c:	0e1b      	lsrs	r3, r3, #24
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a84:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8a:	0f1b      	lsrs	r3, r3, #28
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	019a      	lsls	r2, r3, #6
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	4926      	ldr	r1, [pc, #152]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d011      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	019a      	lsls	r2, r3, #6
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	061b      	lsls	r3, r3, #24
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	071b      	lsls	r3, r3, #28
 8004ada:	491a      	ldr	r1, [pc, #104]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ae2:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aee:	f7fe f947 	bl	8002d80 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004af6:	f7fe f943 	bl	8002d80 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b64      	cmp	r3, #100	; 0x64
 8004b02:	d901      	bls.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e0d8      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b08:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	f040 80ce 	bne.w	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fe f92a 	bl	8002d80 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b30:	f7fe f926 	bl	8002d80 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d904      	bls.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e0bb      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b48:	4b5e      	ldr	r3, [pc, #376]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b54:	d0ec      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d02e      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d12a      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b7e:	4b51      	ldr	r3, [pc, #324]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	0c1b      	lsrs	r3, r3, #16
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b8c:	4b4d      	ldr	r3, [pc, #308]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	0f1b      	lsrs	r3, r3, #28
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	019a      	lsls	r2, r3, #6
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	061b      	lsls	r3, r3, #24
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	071b      	lsls	r3, r3, #28
 8004bb2:	4944      	ldr	r1, [pc, #272]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bba:	4b42      	ldr	r3, [pc, #264]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	493d      	ldr	r1, [pc, #244]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d022      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be8:	d11d      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bea:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bf8:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	0f1b      	lsrs	r3, r3, #28
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	019a      	lsls	r2, r3, #6
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	431a      	orrs	r2, r3
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	061b      	lsls	r3, r3, #24
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	071b      	lsls	r3, r3, #28
 8004c1e:	4929      	ldr	r1, [pc, #164]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d028      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	0e1b      	lsrs	r3, r3, #24
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c40:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	019a      	lsls	r2, r3, #6
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	071b      	lsls	r3, r3, #28
 8004c66:	4917      	ldr	r1, [pc, #92]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4911      	ldr	r1, [pc, #68]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c84:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c90:	f7fe f876 	bl	8002d80 <HAL_GetTick>
 8004c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c98:	f7fe f872 	bl	8002d80 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e007      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb6:	d1ef      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800

08004cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e040      	b.n	8004d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd fe68 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2224      	movs	r2, #36	; 0x24
 8004cf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fb1c 	bl	8005344 <UART_SetConfig>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e022      	b.n	8004d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fd72 	bl	8005808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fdf9 	bl	800594c <UART_CheckIdleState>
 8004d5a:	4603      	mov	r3, r0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d166      	bne.n	8004e48 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_Transmit_DMA+0x22>
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e05f      	b.n	8004e4a <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_UART_Transmit_DMA+0x34>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e058      	b.n	8004e4a <HAL_UART_Transmit_DMA+0xe6>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2221      	movs	r2, #33	; 0x21
 8004dc2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d02b      	beq.n	8004e24 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd0:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <HAL_UART_Transmit_DMA+0xf0>)
 8004dd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <HAL_UART_Transmit_DMA+0xf4>)
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de0:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <HAL_UART_Transmit_DMA+0xf8>)
 8004de2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de8:	2200      	movs	r2, #0
 8004dea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	4619      	mov	r1, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3328      	adds	r3, #40	; 0x28
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	f7fe f9ae 	bl	8003160 <HAL_DMA_Start_IT>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e012      	b.n	8004e4a <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e42:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	08005c39 	.word	0x08005c39
 8004e58:	08005c89 	.word	0x08005c89
 8004e5c:	08005d71 	.word	0x08005d71

08004e60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d12c      	bne.n	8004ed0 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_UART_Receive_DMA+0x22>
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e025      	b.n	8004ed2 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_UART_Receive_DMA+0x34>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e01e      	b.n	8004ed2 <HAL_UART_Receive_DMA+0x72>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ebe:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fe06 	bl	8005ad8 <UART_Start_Receive_DMA>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d113      	bne.n	8004f34 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00e      	beq.n	8004f34 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 81cc 	beq.w	80052c2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
      }
      return;
 8004f32:	e1c6      	b.n	80052c2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80e3 	beq.w	8005102 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d105      	bne.n	8004f52 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4ba5      	ldr	r3, [pc, #660]	; (80051e0 <HAL_UART_IRQHandler+0x304>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80d8 	beq.w	8005102 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <HAL_UART_IRQHandler+0xa2>
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d010      	beq.n	8004faa <HAL_UART_IRQHandler+0xce>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2202      	movs	r2, #2
 8004f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa0:	f043 0204 	orr.w	r2, r3, #4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xfa>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fcc:	f043 0202 	orr.w	r2, r3, #2
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005002:	f043 0208 	orr.w	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <HAL_UART_IRQHandler+0x15e>
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00c      	beq.n	800503a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8140 	beq.w	80052c6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00c      	beq.n	800506a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005070:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d004      	beq.n	800508a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005086:	2b00      	cmp	r3, #0
 8005088:	d031      	beq.n	80050ee <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fda5 	bl	8005bda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d123      	bne.n	80050e6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	4a4a      	ldr	r2, [pc, #296]	; (80051e4 <HAL_UART_IRQHandler+0x308>)
 80050bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe f91c 	bl	8003300 <HAL_DMA_Abort_IT>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d017      	beq.n	80050fe <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80050d8:	4610      	mov	r0, r2
 80050da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	e00f      	b.n	80050fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f910 	bl	8005304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e00b      	b.n	80050fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f90c 	bl	8005304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e007      	b.n	80050fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f908 	bl	8005304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80050fc:	e0e3      	b.n	80052c6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fe:	bf00      	nop
    return;
 8005100:	e0e1      	b.n	80052c6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005106:	2b01      	cmp	r3, #1
 8005108:	f040 80a7 	bne.w	800525a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80a1 	beq.w	800525a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 809b 	beq.w	800525a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2210      	movs	r2, #16
 800512a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b40      	cmp	r3, #64	; 0x40
 8005138:	d156      	bne.n	80051e8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005144:	893b      	ldrh	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80bf 	beq.w	80052ca <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005152:	893a      	ldrh	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	f080 80b8 	bcs.w	80052ca <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	893a      	ldrh	r2, [r7, #8]
 800515e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516c:	d02a      	beq.n	80051c4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0210 	bic.w	r2, r2, #16
 80051b8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe f82e 	bl	8003220 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f89d 	bl	8005318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051de:	e074      	b.n	80052ca <HAL_UART_IRQHandler+0x3ee>
 80051e0:	04000120 	.word	0x04000120
 80051e4:	08005ded 	.word	0x08005ded
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d063      	beq.n	80052ce <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d060      	beq.n	80052ce <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800521a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0210 	bic.w	r2, r2, #16
 800524c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800524e:	897b      	ldrh	r3, [r7, #10]
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f860 	bl	8005318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005258:	e039      	b.n	80052ce <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <HAL_UART_IRQHandler+0x3a4>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005276:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f859 	bl	8005330 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800527e:	e029      	b.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	4798      	blx	r3
    }
    return;
 80052a4:	e015      	b.n	80052d2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d011      	beq.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fdac 	bl	8005e18 <UART_EndTransmit_IT>
    return;
 80052c0:	e008      	b.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80052c2:	bf00      	nop
 80052c4:	e006      	b.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80052c6:	bf00      	nop
 80052c8:	e004      	b.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80052ca:	bf00      	nop
 80052cc:	e002      	b.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80052d2:	bf00      	nop
  }

}
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop

080052dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4ba7      	ldr	r3, [pc, #668]	; (800560c <UART_SetConfig+0x2c8>)
 8005370:	4013      	ands	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	430b      	orrs	r3, r1
 800537a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a95      	ldr	r2, [pc, #596]	; (8005610 <UART_SetConfig+0x2cc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d120      	bne.n	8005402 <UART_SetConfig+0xbe>
 80053c0:	4b94      	ldr	r3, [pc, #592]	; (8005614 <UART_SetConfig+0x2d0>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d816      	bhi.n	80053fc <UART_SetConfig+0xb8>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x90>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053e5 	.word	0x080053e5
 80053d8:	080053f1 	.word	0x080053f1
 80053dc:	080053eb 	.word	0x080053eb
 80053e0:	080053f7 	.word	0x080053f7
 80053e4:	2301      	movs	r3, #1
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e14f      	b.n	800568a <UART_SetConfig+0x346>
 80053ea:	2302      	movs	r3, #2
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e14c      	b.n	800568a <UART_SetConfig+0x346>
 80053f0:	2304      	movs	r3, #4
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e149      	b.n	800568a <UART_SetConfig+0x346>
 80053f6:	2308      	movs	r3, #8
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e146      	b.n	800568a <UART_SetConfig+0x346>
 80053fc:	2310      	movs	r3, #16
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e143      	b.n	800568a <UART_SetConfig+0x346>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a84      	ldr	r2, [pc, #528]	; (8005618 <UART_SetConfig+0x2d4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d132      	bne.n	8005472 <UART_SetConfig+0x12e>
 800540c:	4b81      	ldr	r3, [pc, #516]	; (8005614 <UART_SetConfig+0x2d0>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b0c      	cmp	r3, #12
 8005418:	d828      	bhi.n	800546c <UART_SetConfig+0x128>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0xdc>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005455 	.word	0x08005455
 8005424:	0800546d 	.word	0x0800546d
 8005428:	0800546d 	.word	0x0800546d
 800542c:	0800546d 	.word	0x0800546d
 8005430:	08005461 	.word	0x08005461
 8005434:	0800546d 	.word	0x0800546d
 8005438:	0800546d 	.word	0x0800546d
 800543c:	0800546d 	.word	0x0800546d
 8005440:	0800545b 	.word	0x0800545b
 8005444:	0800546d 	.word	0x0800546d
 8005448:	0800546d 	.word	0x0800546d
 800544c:	0800546d 	.word	0x0800546d
 8005450:	08005467 	.word	0x08005467
 8005454:	2300      	movs	r3, #0
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e117      	b.n	800568a <UART_SetConfig+0x346>
 800545a:	2302      	movs	r3, #2
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e114      	b.n	800568a <UART_SetConfig+0x346>
 8005460:	2304      	movs	r3, #4
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e111      	b.n	800568a <UART_SetConfig+0x346>
 8005466:	2308      	movs	r3, #8
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e10e      	b.n	800568a <UART_SetConfig+0x346>
 800546c:	2310      	movs	r3, #16
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e10b      	b.n	800568a <UART_SetConfig+0x346>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a69      	ldr	r2, [pc, #420]	; (800561c <UART_SetConfig+0x2d8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d120      	bne.n	80054be <UART_SetConfig+0x17a>
 800547c:	4b65      	ldr	r3, [pc, #404]	; (8005614 <UART_SetConfig+0x2d0>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005486:	2b30      	cmp	r3, #48	; 0x30
 8005488:	d013      	beq.n	80054b2 <UART_SetConfig+0x16e>
 800548a:	2b30      	cmp	r3, #48	; 0x30
 800548c:	d814      	bhi.n	80054b8 <UART_SetConfig+0x174>
 800548e:	2b20      	cmp	r3, #32
 8005490:	d009      	beq.n	80054a6 <UART_SetConfig+0x162>
 8005492:	2b20      	cmp	r3, #32
 8005494:	d810      	bhi.n	80054b8 <UART_SetConfig+0x174>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <UART_SetConfig+0x15c>
 800549a:	2b10      	cmp	r3, #16
 800549c:	d006      	beq.n	80054ac <UART_SetConfig+0x168>
 800549e:	e00b      	b.n	80054b8 <UART_SetConfig+0x174>
 80054a0:	2300      	movs	r3, #0
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e0f1      	b.n	800568a <UART_SetConfig+0x346>
 80054a6:	2302      	movs	r3, #2
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e0ee      	b.n	800568a <UART_SetConfig+0x346>
 80054ac:	2304      	movs	r3, #4
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0eb      	b.n	800568a <UART_SetConfig+0x346>
 80054b2:	2308      	movs	r3, #8
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e0e8      	b.n	800568a <UART_SetConfig+0x346>
 80054b8:	2310      	movs	r3, #16
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e0e5      	b.n	800568a <UART_SetConfig+0x346>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a57      	ldr	r2, [pc, #348]	; (8005620 <UART_SetConfig+0x2dc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d120      	bne.n	800550a <UART_SetConfig+0x1c6>
 80054c8:	4b52      	ldr	r3, [pc, #328]	; (8005614 <UART_SetConfig+0x2d0>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054d2:	2bc0      	cmp	r3, #192	; 0xc0
 80054d4:	d013      	beq.n	80054fe <UART_SetConfig+0x1ba>
 80054d6:	2bc0      	cmp	r3, #192	; 0xc0
 80054d8:	d814      	bhi.n	8005504 <UART_SetConfig+0x1c0>
 80054da:	2b80      	cmp	r3, #128	; 0x80
 80054dc:	d009      	beq.n	80054f2 <UART_SetConfig+0x1ae>
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d810      	bhi.n	8005504 <UART_SetConfig+0x1c0>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <UART_SetConfig+0x1a8>
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d006      	beq.n	80054f8 <UART_SetConfig+0x1b4>
 80054ea:	e00b      	b.n	8005504 <UART_SetConfig+0x1c0>
 80054ec:	2300      	movs	r3, #0
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e0cb      	b.n	800568a <UART_SetConfig+0x346>
 80054f2:	2302      	movs	r3, #2
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e0c8      	b.n	800568a <UART_SetConfig+0x346>
 80054f8:	2304      	movs	r3, #4
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e0c5      	b.n	800568a <UART_SetConfig+0x346>
 80054fe:	2308      	movs	r3, #8
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e0c2      	b.n	800568a <UART_SetConfig+0x346>
 8005504:	2310      	movs	r3, #16
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0bf      	b.n	800568a <UART_SetConfig+0x346>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a45      	ldr	r2, [pc, #276]	; (8005624 <UART_SetConfig+0x2e0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d125      	bne.n	8005560 <UART_SetConfig+0x21c>
 8005514:	4b3f      	ldr	r3, [pc, #252]	; (8005614 <UART_SetConfig+0x2d0>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005522:	d017      	beq.n	8005554 <UART_SetConfig+0x210>
 8005524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005528:	d817      	bhi.n	800555a <UART_SetConfig+0x216>
 800552a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552e:	d00b      	beq.n	8005548 <UART_SetConfig+0x204>
 8005530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005534:	d811      	bhi.n	800555a <UART_SetConfig+0x216>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <UART_SetConfig+0x1fe>
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	d006      	beq.n	800554e <UART_SetConfig+0x20a>
 8005540:	e00b      	b.n	800555a <UART_SetConfig+0x216>
 8005542:	2300      	movs	r3, #0
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e0a0      	b.n	800568a <UART_SetConfig+0x346>
 8005548:	2302      	movs	r3, #2
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e09d      	b.n	800568a <UART_SetConfig+0x346>
 800554e:	2304      	movs	r3, #4
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e09a      	b.n	800568a <UART_SetConfig+0x346>
 8005554:	2308      	movs	r3, #8
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e097      	b.n	800568a <UART_SetConfig+0x346>
 800555a:	2310      	movs	r3, #16
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e094      	b.n	800568a <UART_SetConfig+0x346>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a30      	ldr	r2, [pc, #192]	; (8005628 <UART_SetConfig+0x2e4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d125      	bne.n	80055b6 <UART_SetConfig+0x272>
 800556a:	4b2a      	ldr	r3, [pc, #168]	; (8005614 <UART_SetConfig+0x2d0>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005578:	d017      	beq.n	80055aa <UART_SetConfig+0x266>
 800557a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800557e:	d817      	bhi.n	80055b0 <UART_SetConfig+0x26c>
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005584:	d00b      	beq.n	800559e <UART_SetConfig+0x25a>
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558a:	d811      	bhi.n	80055b0 <UART_SetConfig+0x26c>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <UART_SetConfig+0x254>
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d006      	beq.n	80055a4 <UART_SetConfig+0x260>
 8005596:	e00b      	b.n	80055b0 <UART_SetConfig+0x26c>
 8005598:	2301      	movs	r3, #1
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e075      	b.n	800568a <UART_SetConfig+0x346>
 800559e:	2302      	movs	r3, #2
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e072      	b.n	800568a <UART_SetConfig+0x346>
 80055a4:	2304      	movs	r3, #4
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e06f      	b.n	800568a <UART_SetConfig+0x346>
 80055aa:	2308      	movs	r3, #8
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e06c      	b.n	800568a <UART_SetConfig+0x346>
 80055b0:	2310      	movs	r3, #16
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e069      	b.n	800568a <UART_SetConfig+0x346>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1c      	ldr	r2, [pc, #112]	; (800562c <UART_SetConfig+0x2e8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d137      	bne.n	8005630 <UART_SetConfig+0x2ec>
 80055c0:	4b14      	ldr	r3, [pc, #80]	; (8005614 <UART_SetConfig+0x2d0>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ce:	d017      	beq.n	8005600 <UART_SetConfig+0x2bc>
 80055d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d4:	d817      	bhi.n	8005606 <UART_SetConfig+0x2c2>
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055da:	d00b      	beq.n	80055f4 <UART_SetConfig+0x2b0>
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e0:	d811      	bhi.n	8005606 <UART_SetConfig+0x2c2>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <UART_SetConfig+0x2aa>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d006      	beq.n	80055fa <UART_SetConfig+0x2b6>
 80055ec:	e00b      	b.n	8005606 <UART_SetConfig+0x2c2>
 80055ee:	2300      	movs	r3, #0
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e04a      	b.n	800568a <UART_SetConfig+0x346>
 80055f4:	2302      	movs	r3, #2
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e047      	b.n	800568a <UART_SetConfig+0x346>
 80055fa:	2304      	movs	r3, #4
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e044      	b.n	800568a <UART_SetConfig+0x346>
 8005600:	2308      	movs	r3, #8
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e041      	b.n	800568a <UART_SetConfig+0x346>
 8005606:	2310      	movs	r3, #16
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e03e      	b.n	800568a <UART_SetConfig+0x346>
 800560c:	efff69f3 	.word	0xefff69f3
 8005610:	40011000 	.word	0x40011000
 8005614:	40023800 	.word	0x40023800
 8005618:	40004400 	.word	0x40004400
 800561c:	40004800 	.word	0x40004800
 8005620:	40004c00 	.word	0x40004c00
 8005624:	40005000 	.word	0x40005000
 8005628:	40011400 	.word	0x40011400
 800562c:	40007800 	.word	0x40007800
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a71      	ldr	r2, [pc, #452]	; (80057fc <UART_SetConfig+0x4b8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d125      	bne.n	8005686 <UART_SetConfig+0x342>
 800563a:	4b71      	ldr	r3, [pc, #452]	; (8005800 <UART_SetConfig+0x4bc>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005644:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005648:	d017      	beq.n	800567a <UART_SetConfig+0x336>
 800564a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800564e:	d817      	bhi.n	8005680 <UART_SetConfig+0x33c>
 8005650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005654:	d00b      	beq.n	800566e <UART_SetConfig+0x32a>
 8005656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565a:	d811      	bhi.n	8005680 <UART_SetConfig+0x33c>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <UART_SetConfig+0x324>
 8005660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005664:	d006      	beq.n	8005674 <UART_SetConfig+0x330>
 8005666:	e00b      	b.n	8005680 <UART_SetConfig+0x33c>
 8005668:	2300      	movs	r3, #0
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e00d      	b.n	800568a <UART_SetConfig+0x346>
 800566e:	2302      	movs	r3, #2
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e00a      	b.n	800568a <UART_SetConfig+0x346>
 8005674:	2304      	movs	r3, #4
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e007      	b.n	800568a <UART_SetConfig+0x346>
 800567a:	2308      	movs	r3, #8
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e004      	b.n	800568a <UART_SetConfig+0x346>
 8005680:	2310      	movs	r3, #16
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	e001      	b.n	800568a <UART_SetConfig+0x346>
 8005686:	2310      	movs	r3, #16
 8005688:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005692:	d15b      	bne.n	800574c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005694:	7ffb      	ldrb	r3, [r7, #31]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d827      	bhi.n	80056ea <UART_SetConfig+0x3a6>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <UART_SetConfig+0x35c>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	080056eb 	.word	0x080056eb
 80056b0:	080056db 	.word	0x080056db
 80056b4:	080056eb 	.word	0x080056eb
 80056b8:	080056eb 	.word	0x080056eb
 80056bc:	080056eb 	.word	0x080056eb
 80056c0:	080056e3 	.word	0x080056e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c4:	f7fe feb0 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 80056c8:	61b8      	str	r0, [r7, #24]
        break;
 80056ca:	e013      	b.n	80056f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7fe fec0 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 80056d0:	61b8      	str	r0, [r7, #24]
        break;
 80056d2:	e00f      	b.n	80056f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d4:	4b4b      	ldr	r3, [pc, #300]	; (8005804 <UART_SetConfig+0x4c0>)
 80056d6:	61bb      	str	r3, [r7, #24]
        break;
 80056d8:	e00c      	b.n	80056f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056da:	f7fe fde3 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 80056de:	61b8      	str	r0, [r7, #24]
        break;
 80056e0:	e008      	b.n	80056f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e004      	b.n	80056f4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	77bb      	strb	r3, [r7, #30]
        break;
 80056f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d074      	beq.n	80057e4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	005a      	lsls	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	441a      	add	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	b29b      	uxth	r3, r3
 8005710:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b0f      	cmp	r3, #15
 8005716:	d916      	bls.n	8005746 <UART_SetConfig+0x402>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571e:	d212      	bcs.n	8005746 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f023 030f 	bic.w	r3, r3, #15
 8005728:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	b29b      	uxth	r3, r3
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	b29a      	uxth	r2, r3
 8005736:	89fb      	ldrh	r3, [r7, #14]
 8005738:	4313      	orrs	r3, r2
 800573a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	89fa      	ldrh	r2, [r7, #14]
 8005742:	60da      	str	r2, [r3, #12]
 8005744:	e04e      	b.n	80057e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	77bb      	strb	r3, [r7, #30]
 800574a:	e04b      	b.n	80057e4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800574c:	7ffb      	ldrb	r3, [r7, #31]
 800574e:	2b08      	cmp	r3, #8
 8005750:	d827      	bhi.n	80057a2 <UART_SetConfig+0x45e>
 8005752:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <UART_SetConfig+0x414>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	0800577d 	.word	0x0800577d
 800575c:	08005785 	.word	0x08005785
 8005760:	0800578d 	.word	0x0800578d
 8005764:	080057a3 	.word	0x080057a3
 8005768:	08005793 	.word	0x08005793
 800576c:	080057a3 	.word	0x080057a3
 8005770:	080057a3 	.word	0x080057a3
 8005774:	080057a3 	.word	0x080057a3
 8005778:	0800579b 	.word	0x0800579b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fe fe54 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8005780:	61b8      	str	r0, [r7, #24]
        break;
 8005782:	e013      	b.n	80057ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7fe fe64 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8005788:	61b8      	str	r0, [r7, #24]
        break;
 800578a:	e00f      	b.n	80057ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578c:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <UART_SetConfig+0x4c0>)
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e00c      	b.n	80057ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005792:	f7fe fd87 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8005796:	61b8      	str	r0, [r7, #24]
        break;
 8005798:	e008      	b.n	80057ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579e:	61bb      	str	r3, [r7, #24]
        break;
 80057a0:	e004      	b.n	80057ac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	77bb      	strb	r3, [r7, #30]
        break;
 80057aa:	bf00      	nop
    }

    if (pclk != 0U)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	085a      	lsrs	r2, r3, #1
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	441a      	add	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	d908      	bls.n	80057e0 <UART_SetConfig+0x49c>
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d4:	d204      	bcs.n	80057e0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	e001      	b.n	80057e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40007c00 	.word	0x40007c00
 8005800:	40023800 	.word	0x40023800
 8005804:	00f42400 	.word	0x00f42400

08005808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01a      	beq.n	800591e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005906:	d10a      	bne.n	800591e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800595c:	f7fd fa10 	bl	8002d80 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b08      	cmp	r3, #8
 800596e:	d10e      	bne.n	800598e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f82d 	bl	80059de <UART_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e023      	b.n	80059d6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d10e      	bne.n	80059ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f817 	bl	80059de <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e00d      	b.n	80059d6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ee:	e05e      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f6:	d05a      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fd f9c2 	bl	8002d80 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11b      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e043      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02c      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a62:	d124      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e00f      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d091      	beq.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2222      	movs	r2, #34	; 0x22
 8005b00:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d02b      	beq.n	8005b62 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <UART_Start_Receive_DMA+0xcc>)
 8005b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <UART_Start_Receive_DMA+0xd0>)
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4a23      	ldr	r2, [pc, #140]	; (8005bac <UART_Start_Receive_DMA+0xd4>)
 8005b20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	2200      	movs	r2, #0
 8005b28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3324      	adds	r3, #36	; 0x24
 8005b34:	4619      	mov	r1, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	f7fd fb0f 	bl	8003160 <HAL_DMA_Start_IT>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00c      	beq.n	8005b62 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2210      	movs	r2, #16
 8005b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e01c      	b.n	8005b9c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b78:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b98:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08005ca5 	.word	0x08005ca5
 8005ba8:	08005d39 	.word	0x08005d39
 8005bac:	08005d71 	.word	0x08005d71

08005bb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005bc6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bf0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0201 	bic.w	r2, r2, #1
 8005c00:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d107      	bne.n	8005c1a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0210 	bic.w	r2, r2, #16
 8005c18:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d014      	beq.n	8005c7a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c66:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c76:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c78:	e002      	b.n	8005c80 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7fb fe3c 	bl	80018f8 <HAL_UART_TxCpltCallback>
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fb20 	bl	80052dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cba:	d02a      	beq.n	8005d12 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cd2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d107      	bne.n	8005d12 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0210 	bic.w	r2, r2, #16
 8005d10:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d107      	bne.n	8005d2a <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d20:	4619      	mov	r1, r3
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff faf8 	bl	8005318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d28:	e002      	b.n	8005d30 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7fb fdf2 	bl	8001914 <HAL_UART_RxCpltCallback>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d109      	bne.n	8005d62 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff fadc 	bl	8005318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d60:	e002      	b.n	8005d68 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff fac4 	bl	80052f0 <HAL_UART_RxHalfCpltCallback>
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d94:	2b80      	cmp	r3, #128	; 0x80
 8005d96:	d109      	bne.n	8005dac <UART_DMAError+0x3c>
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b21      	cmp	r3, #33	; 0x21
 8005d9c:	d106      	bne.n	8005dac <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005da6:	6978      	ldr	r0, [r7, #20]
 8005da8:	f7ff ff02 	bl	8005bb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b40      	cmp	r3, #64	; 0x40
 8005db8:	d109      	bne.n	8005dce <UART_DMAError+0x5e>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b22      	cmp	r3, #34	; 0x22
 8005dbe:	d106      	bne.n	8005dce <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7ff ff06 	bl	8005bda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd4:	f043 0210 	orr.w	r2, r3, #16
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f7ff fa90 	bl	8005304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fa7a 	bl	8005304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fb fd5b 	bl	80018f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <__cxa_pure_virtual>:
 8005e4a:	b508      	push	{r3, lr}
 8005e4c:	f000 f80c 	bl	8005e68 <_ZSt9terminatev>

08005e50 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005e50:	b508      	push	{r3, lr}
 8005e52:	4780      	blx	r0
 8005e54:	f000 f80d 	bl	8005e72 <abort>

08005e58 <_ZSt13get_terminatev>:
 8005e58:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <_ZSt13get_terminatev+0xc>)
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	f3bf 8f5b 	dmb	ish
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	2000000c 	.word	0x2000000c

08005e68 <_ZSt9terminatev>:
 8005e68:	b508      	push	{r3, lr}
 8005e6a:	f7ff fff5 	bl	8005e58 <_ZSt13get_terminatev>
 8005e6e:	f7ff ffef 	bl	8005e50 <_ZN10__cxxabiv111__terminateEPFvvE>

08005e72 <abort>:
 8005e72:	b508      	push	{r3, lr}
 8005e74:	2006      	movs	r0, #6
 8005e76:	f000 f873 	bl	8005f60 <raise>
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	f7fc feb4 	bl	8002be8 <_exit>

08005e80 <__errno>:
 8005e80:	4b01      	ldr	r3, [pc, #4]	; (8005e88 <__errno+0x8>)
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000010 	.word	0x20000010

08005e8c <__libc_init_array>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4d0d      	ldr	r5, [pc, #52]	; (8005ec4 <__libc_init_array+0x38>)
 8005e90:	4c0d      	ldr	r4, [pc, #52]	; (8005ec8 <__libc_init_array+0x3c>)
 8005e92:	1b64      	subs	r4, r4, r5
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	2600      	movs	r6, #0
 8005e98:	42a6      	cmp	r6, r4
 8005e9a:	d109      	bne.n	8005eb0 <__libc_init_array+0x24>
 8005e9c:	4d0b      	ldr	r5, [pc, #44]	; (8005ecc <__libc_init_array+0x40>)
 8005e9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ed0 <__libc_init_array+0x44>)
 8005ea0:	f000 f970 	bl	8006184 <_init>
 8005ea4:	1b64      	subs	r4, r4, r5
 8005ea6:	10a4      	asrs	r4, r4, #2
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	42a6      	cmp	r6, r4
 8005eac:	d105      	bne.n	8005eba <__libc_init_array+0x2e>
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb4:	4798      	blx	r3
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7ee      	b.n	8005e98 <__libc_init_array+0xc>
 8005eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebe:	4798      	blx	r3
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	e7f2      	b.n	8005eaa <__libc_init_array+0x1e>
 8005ec4:	08006474 	.word	0x08006474
 8005ec8:	08006474 	.word	0x08006474
 8005ecc:	08006474 	.word	0x08006474
 8005ed0:	0800647c 	.word	0x0800647c

08005ed4 <memcpy>:
 8005ed4:	440a      	add	r2, r1
 8005ed6:	4291      	cmp	r1, r2
 8005ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005edc:	d100      	bne.n	8005ee0 <memcpy+0xc>
 8005ede:	4770      	bx	lr
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eea:	4291      	cmp	r1, r2
 8005eec:	d1f9      	bne.n	8005ee2 <memcpy+0xe>
 8005eee:	bd10      	pop	{r4, pc}

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <realloc>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <realloc+0xc>)
 8005f02:	460a      	mov	r2, r1
 8005f04:	4601      	mov	r1, r0
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	f000 b8a0 	b.w	800604c <_realloc_r>
 8005f0c:	20000010 	.word	0x20000010

08005f10 <_raise_r>:
 8005f10:	291f      	cmp	r1, #31
 8005f12:	b538      	push	{r3, r4, r5, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	460d      	mov	r5, r1
 8005f18:	d904      	bls.n	8005f24 <_raise_r+0x14>
 8005f1a:	2316      	movs	r3, #22
 8005f1c:	6003      	str	r3, [r0, #0]
 8005f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f26:	b112      	cbz	r2, 8005f2e <_raise_r+0x1e>
 8005f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f2c:	b94b      	cbnz	r3, 8005f42 <_raise_r+0x32>
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 f830 	bl	8005f94 <_getpid_r>
 8005f34:	462a      	mov	r2, r5
 8005f36:	4601      	mov	r1, r0
 8005f38:	4620      	mov	r0, r4
 8005f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f3e:	f000 b817 	b.w	8005f70 <_kill_r>
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d00a      	beq.n	8005f5c <_raise_r+0x4c>
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	d103      	bne.n	8005f52 <_raise_r+0x42>
 8005f4a:	2316      	movs	r3, #22
 8005f4c:	6003      	str	r3, [r0, #0]
 8005f4e:	2001      	movs	r0, #1
 8005f50:	e7e7      	b.n	8005f22 <_raise_r+0x12>
 8005f52:	2400      	movs	r4, #0
 8005f54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f58:	4628      	mov	r0, r5
 8005f5a:	4798      	blx	r3
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e7e0      	b.n	8005f22 <_raise_r+0x12>

08005f60 <raise>:
 8005f60:	4b02      	ldr	r3, [pc, #8]	; (8005f6c <raise+0xc>)
 8005f62:	4601      	mov	r1, r0
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	f7ff bfd3 	b.w	8005f10 <_raise_r>
 8005f6a:	bf00      	nop
 8005f6c:	20000010 	.word	0x20000010

08005f70 <_kill_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4d07      	ldr	r5, [pc, #28]	; (8005f90 <_kill_r+0x20>)
 8005f74:	2300      	movs	r3, #0
 8005f76:	4604      	mov	r4, r0
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	602b      	str	r3, [r5, #0]
 8005f7e:	f7fc fe23 	bl	8002bc8 <_kill>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	d102      	bne.n	8005f8c <_kill_r+0x1c>
 8005f86:	682b      	ldr	r3, [r5, #0]
 8005f88:	b103      	cbz	r3, 8005f8c <_kill_r+0x1c>
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	bd38      	pop	{r3, r4, r5, pc}
 8005f8e:	bf00      	nop
 8005f90:	2000096c 	.word	0x2000096c

08005f94 <_getpid_r>:
 8005f94:	f7fc be10 	b.w	8002bb8 <_getpid>

08005f98 <_malloc_r>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	1ccd      	adds	r5, r1, #3
 8005f9c:	f025 0503 	bic.w	r5, r5, #3
 8005fa0:	3508      	adds	r5, #8
 8005fa2:	2d0c      	cmp	r5, #12
 8005fa4:	bf38      	it	cc
 8005fa6:	250c      	movcc	r5, #12
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	4606      	mov	r6, r0
 8005fac:	db01      	blt.n	8005fb2 <_malloc_r+0x1a>
 8005fae:	42a9      	cmp	r1, r5
 8005fb0:	d903      	bls.n	8005fba <_malloc_r+0x22>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	6033      	str	r3, [r6, #0]
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fba:	f000 f87d 	bl	80060b8 <__malloc_lock>
 8005fbe:	4921      	ldr	r1, [pc, #132]	; (8006044 <_malloc_r+0xac>)
 8005fc0:	680a      	ldr	r2, [r1, #0]
 8005fc2:	4614      	mov	r4, r2
 8005fc4:	b99c      	cbnz	r4, 8005fee <_malloc_r+0x56>
 8005fc6:	4f20      	ldr	r7, [pc, #128]	; (8006048 <_malloc_r+0xb0>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b923      	cbnz	r3, 8005fd6 <_malloc_r+0x3e>
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f000 f862 	bl	8006098 <_sbrk_r>
 8005fd4:	6038      	str	r0, [r7, #0]
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 f85d 	bl	8006098 <_sbrk_r>
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	d123      	bne.n	800602a <_malloc_r+0x92>
 8005fe2:	230c      	movs	r3, #12
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 f86c 	bl	80060c4 <__malloc_unlock>
 8005fec:	e7e3      	b.n	8005fb6 <_malloc_r+0x1e>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	1b5b      	subs	r3, r3, r5
 8005ff2:	d417      	bmi.n	8006024 <_malloc_r+0x8c>
 8005ff4:	2b0b      	cmp	r3, #11
 8005ff6:	d903      	bls.n	8006000 <_malloc_r+0x68>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	441c      	add	r4, r3
 8005ffc:	6025      	str	r5, [r4, #0]
 8005ffe:	e004      	b.n	800600a <_malloc_r+0x72>
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	42a2      	cmp	r2, r4
 8006004:	bf0c      	ite	eq
 8006006:	600b      	streq	r3, [r1, #0]
 8006008:	6053      	strne	r3, [r2, #4]
 800600a:	4630      	mov	r0, r6
 800600c:	f000 f85a 	bl	80060c4 <__malloc_unlock>
 8006010:	f104 000b 	add.w	r0, r4, #11
 8006014:	1d23      	adds	r3, r4, #4
 8006016:	f020 0007 	bic.w	r0, r0, #7
 800601a:	1ac2      	subs	r2, r0, r3
 800601c:	d0cc      	beq.n	8005fb8 <_malloc_r+0x20>
 800601e:	1a1b      	subs	r3, r3, r0
 8006020:	50a3      	str	r3, [r4, r2]
 8006022:	e7c9      	b.n	8005fb8 <_malloc_r+0x20>
 8006024:	4622      	mov	r2, r4
 8006026:	6864      	ldr	r4, [r4, #4]
 8006028:	e7cc      	b.n	8005fc4 <_malloc_r+0x2c>
 800602a:	1cc4      	adds	r4, r0, #3
 800602c:	f024 0403 	bic.w	r4, r4, #3
 8006030:	42a0      	cmp	r0, r4
 8006032:	d0e3      	beq.n	8005ffc <_malloc_r+0x64>
 8006034:	1a21      	subs	r1, r4, r0
 8006036:	4630      	mov	r0, r6
 8006038:	f000 f82e 	bl	8006098 <_sbrk_r>
 800603c:	3001      	adds	r0, #1
 800603e:	d1dd      	bne.n	8005ffc <_malloc_r+0x64>
 8006040:	e7cf      	b.n	8005fe2 <_malloc_r+0x4a>
 8006042:	bf00      	nop
 8006044:	2000081c 	.word	0x2000081c
 8006048:	20000820 	.word	0x20000820

0800604c <_realloc_r>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	4607      	mov	r7, r0
 8006050:	4614      	mov	r4, r2
 8006052:	460e      	mov	r6, r1
 8006054:	b921      	cbnz	r1, 8006060 <_realloc_r+0x14>
 8006056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800605a:	4611      	mov	r1, r2
 800605c:	f7ff bf9c 	b.w	8005f98 <_malloc_r>
 8006060:	b922      	cbnz	r2, 800606c <_realloc_r+0x20>
 8006062:	f000 f835 	bl	80060d0 <_free_r>
 8006066:	4625      	mov	r5, r4
 8006068:	4628      	mov	r0, r5
 800606a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606c:	f000 f880 	bl	8006170 <_malloc_usable_size_r>
 8006070:	42a0      	cmp	r0, r4
 8006072:	d20f      	bcs.n	8006094 <_realloc_r+0x48>
 8006074:	4621      	mov	r1, r4
 8006076:	4638      	mov	r0, r7
 8006078:	f7ff ff8e 	bl	8005f98 <_malloc_r>
 800607c:	4605      	mov	r5, r0
 800607e:	2800      	cmp	r0, #0
 8006080:	d0f2      	beq.n	8006068 <_realloc_r+0x1c>
 8006082:	4631      	mov	r1, r6
 8006084:	4622      	mov	r2, r4
 8006086:	f7ff ff25 	bl	8005ed4 <memcpy>
 800608a:	4631      	mov	r1, r6
 800608c:	4638      	mov	r0, r7
 800608e:	f000 f81f 	bl	80060d0 <_free_r>
 8006092:	e7e9      	b.n	8006068 <_realloc_r+0x1c>
 8006094:	4635      	mov	r5, r6
 8006096:	e7e7      	b.n	8006068 <_realloc_r+0x1c>

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	; (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fc fdaa 	bl	8002bfc <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	2000096c 	.word	0x2000096c

080060b8 <__malloc_lock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_lock+0x8>)
 80060ba:	f000 b861 	b.w	8006180 <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	20000974 	.word	0x20000974

080060c4 <__malloc_unlock>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__malloc_unlock+0x8>)
 80060c6:	f000 b85c 	b.w	8006182 <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	20000974 	.word	0x20000974

080060d0 <_free_r>:
 80060d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d2:	2900      	cmp	r1, #0
 80060d4:	d048      	beq.n	8006168 <_free_r+0x98>
 80060d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060da:	9001      	str	r0, [sp, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f1a1 0404 	sub.w	r4, r1, #4
 80060e2:	bfb8      	it	lt
 80060e4:	18e4      	addlt	r4, r4, r3
 80060e6:	f7ff ffe7 	bl	80060b8 <__malloc_lock>
 80060ea:	4a20      	ldr	r2, [pc, #128]	; (800616c <_free_r+0x9c>)
 80060ec:	9801      	ldr	r0, [sp, #4]
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	4615      	mov	r5, r2
 80060f2:	b933      	cbnz	r3, 8006102 <_free_r+0x32>
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	6014      	str	r4, [r2, #0]
 80060f8:	b003      	add	sp, #12
 80060fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060fe:	f7ff bfe1 	b.w	80060c4 <__malloc_unlock>
 8006102:	42a3      	cmp	r3, r4
 8006104:	d90b      	bls.n	800611e <_free_r+0x4e>
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	1862      	adds	r2, r4, r1
 800610a:	4293      	cmp	r3, r2
 800610c:	bf04      	itt	eq
 800610e:	681a      	ldreq	r2, [r3, #0]
 8006110:	685b      	ldreq	r3, [r3, #4]
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	bf04      	itt	eq
 8006116:	1852      	addeq	r2, r2, r1
 8006118:	6022      	streq	r2, [r4, #0]
 800611a:	602c      	str	r4, [r5, #0]
 800611c:	e7ec      	b.n	80060f8 <_free_r+0x28>
 800611e:	461a      	mov	r2, r3
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	b10b      	cbz	r3, 8006128 <_free_r+0x58>
 8006124:	42a3      	cmp	r3, r4
 8006126:	d9fa      	bls.n	800611e <_free_r+0x4e>
 8006128:	6811      	ldr	r1, [r2, #0]
 800612a:	1855      	adds	r5, r2, r1
 800612c:	42a5      	cmp	r5, r4
 800612e:	d10b      	bne.n	8006148 <_free_r+0x78>
 8006130:	6824      	ldr	r4, [r4, #0]
 8006132:	4421      	add	r1, r4
 8006134:	1854      	adds	r4, r2, r1
 8006136:	42a3      	cmp	r3, r4
 8006138:	6011      	str	r1, [r2, #0]
 800613a:	d1dd      	bne.n	80060f8 <_free_r+0x28>
 800613c:	681c      	ldr	r4, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	6053      	str	r3, [r2, #4]
 8006142:	4421      	add	r1, r4
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	e7d7      	b.n	80060f8 <_free_r+0x28>
 8006148:	d902      	bls.n	8006150 <_free_r+0x80>
 800614a:	230c      	movs	r3, #12
 800614c:	6003      	str	r3, [r0, #0]
 800614e:	e7d3      	b.n	80060f8 <_free_r+0x28>
 8006150:	6825      	ldr	r5, [r4, #0]
 8006152:	1961      	adds	r1, r4, r5
 8006154:	428b      	cmp	r3, r1
 8006156:	bf04      	itt	eq
 8006158:	6819      	ldreq	r1, [r3, #0]
 800615a:	685b      	ldreq	r3, [r3, #4]
 800615c:	6063      	str	r3, [r4, #4]
 800615e:	bf04      	itt	eq
 8006160:	1949      	addeq	r1, r1, r5
 8006162:	6021      	streq	r1, [r4, #0]
 8006164:	6054      	str	r4, [r2, #4]
 8006166:	e7c7      	b.n	80060f8 <_free_r+0x28>
 8006168:	b003      	add	sp, #12
 800616a:	bd30      	pop	{r4, r5, pc}
 800616c:	2000081c 	.word	0x2000081c

08006170 <_malloc_usable_size_r>:
 8006170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006174:	1f18      	subs	r0, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfbc      	itt	lt
 800617a:	580b      	ldrlt	r3, [r1, r0]
 800617c:	18c0      	addlt	r0, r0, r3
 800617e:	4770      	bx	lr

08006180 <__retarget_lock_acquire_recursive>:
 8006180:	4770      	bx	lr

08006182 <__retarget_lock_release_recursive>:
 8006182:	4770      	bx	lr

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
